/* {{- $page := .Page }} {{- $mediaType := .MediaType }} {{- $template := "assets/styles/claris-main.scss" }} */
/* File='styles/claris-main.scss': hugo.Environment='{{ hugo.Environment }}' .Page='{{ .Page }}' .ContentTypeList='{{ printf "%v" .ContentTypeList }}' .ContentTypeListID='{{ .ContentTypeListID }}' .ContentType='{{ .ContentType }}' .MediaType='{{ .MediaType }}' */
/* AssetStyle:
{{- jsonify (dict "indent" "  ") .AssetStyle -}}
*/

@use 'hugo-vars' as hugo;

// Core stylesheets that are included for all media types
@import 'claris/functions';

@import 'claris/colors';

{{- $themeColorSchemePath := default "colors" ($page.Param "themeColorSchemePath") }}
{{- with ($page.Param "themeColorScheme" | default false) }}
{{ $themeColorSchemeFile := printf "%s/%s" $themeColorSchemePath . }}
@import 'claris/{{ $themeColorSchemeFile }}';
{{- end }}

{{ $fontTypeDefault := $page.Param "assets.styles.fonts.type.default" | default "sans" }}
{{ $fontTypeContent := $page.Param "assets.styles.fonts.type.content" | default ($page.Param "assets.styles.fonts.type.default") }}
{{ $fontTypeArticle := $page.Param "assets.styles.fonts.type.article" | default "serif" }}
{{ $fontTypeCode    := $page.Param "assets.styles.fonts.type.code"    | default "mono" }}
{{ $fontTypeHeading := $page.Param "assets.styles.fonts.type.heading" | default "inherit" }}
{{ $fontTypeMeta    := $page.Param "assets.styles.fonts.type.meta"    | default "sans" }}

$fontTypeDefault: '{{ $fontTypeDefault }}';
$fontTypeContent: '{{ $fontTypeContent }}';
$fontTypeArticle: '{{ $fontTypeArticle }}';
$fontTypeCode:    '{{ $fontTypeCode }}';
$fontTypeHeading: '{{ $fontTypeHeading }}';
$fontTypeMeta:    '{{ $fontTypeMeta }}';

{{- $fontFamilyNames  := (dict
  "sans"  ($page.Param "assets.styles.fonts.family.sans"  | default "Source Sans 3")
  "serif" ($page.Param "assets.styles.fonts.family.serif" | default "Alegreya")
  "mono"  ($page.Param "assets.styles.fonts.family.mono"  | default "DM Mono")
) -}}
{{- $fontFamilies := (slice
  (dict "fontType" "default"  "family" (index $fontFamilyNames $fontTypeDefault) )
  (dict "fontType" "sans"     "family" $fontFamilyNames.sans)
  (dict "fontType" "serif"    "family" $fontFamilyNames.serif)
  (dict "fontType" "mono"     "family" $fontFamilyNames.mono)
) }}
$fontFamilyMap: ();
$fontDefinitionMap: () !default;
$currentFontDefinition: default !default;
{{- range $fontFamilies }}
  {{- $fontTypeKey := .fontType }}
  {{- $fontTypeSuffix := strings.FirstUpper $fontTypeKey }}
  {{- $familyName :=  .family }}
  {{- $familyID :=  (urlize .family) }}

$fontFamilyName: '{{ $familyName }}';
$fontFamilyID: '{{ $familyID }}';
{{ printf `$fontFamily%vID: '%v'` $fontTypeSuffix $familyID | safeCSS }};

$fontFamilyDefault: (name: '{{ $familyName }}');

{{- $assetStyleRoot := "styles" }}
{{- $fontsSelfHosted := $page.Param "assets.styles.fonts.selfhosted" | default false }}
{{- if $fontsSelfHosted }}
  {{- $styleFontsPath := "claris/fonts" }}
  {{- $assetFontPath := printf "%s/%s" $assetStyleRoot $styleFontsPath }}
  {{- $hostedFontPath := default (relURL "fonts") ($page.Param "hostedFontPath") }}
  {{- $fontSpecPathGlob := printf "%s/%s.scss" $assetFontPath $familyID }}
  {{- with resources.Get $fontSpecPathGlob }}
    /* Importing self-hosted font with familyName='{{ $familyName }}' familyID='{{ $familyID }}' from '{{ . }}' */
    $styleFontsPath: '{{ $styleFontsPath }}';
    $hostedFontPath: '{{ $hostedFontPath }}';
    @import '{{ $styleFontsPath }}/{{ $familyID }}';
    {{- /* warnf "%s[%s]: loading font specification file for familyID=%v from '%v' (matching %v)"
      $page $template $familyID . $fontSpecPathGlob */ -}}
  {{- else }}
    {{- errorf "%s[%s]: could not find font specification file for familyID=%v at '%v'"
          $page $template $familyID $fontSpecPathGlob -}}
    {{- $fontsSelfHosted = false }}
  {{- end }}
{{- end }}
{{- if not $fontsSelfHosted -}}
$fontFamilySpec: (
  // Default font-family
  name: '{{ $familyName }}',
  // Default styles
  styles: (
    // Style: `default`, i.e., body text
    default: (
      font-weight: 400,
      line-height: 1.4
    ),
    strong: (
      font-weight: 600,
    )
  ),
  // Alternative roles
  roles: (
    // Role: `display`, i.e., short pieces of text such as headings, labels, navigation
    display: (
      styles: (
        default: (
          font-weight: 400,
          line-height: 1.2
        ),
        strong: (
          font-weight: 600
        )
      )
    )
  ),
  // // Font variants such as small-caps, oldstyle-nums
  // variants: (
  //   // Font variant: `small-caps`
  //   small-caps: (
  //     name: 'Alegreya SC'
  //   )
  // ),
);

  $fontFamilyMap: map-merge($fontFamilyMap, ($fontFamilyID: $fontFamilySpec));
{{- end }}

{{- if $fontsSelfHosted }}
  {{- $fallbankFontFamilyStylesheet := printf `/styles/claris/fonts/fallback/%s.*` $familyID }}
  {{- if resources.GetMatch $fallbankFontFamilyStylesheet }}
    {{- $familyStack := (slice (printf `%s-fallback` $familyID) (printf `%s-fallback-android` $familyID)) }}
    $fallbackStack: ({{ printf `'%s'` (delimit $familyStack "', '") }});
    $fontFamilyDefault: map-merge($fontFamilyDefault, (fallback: $fallbackStack) );
    @import 'claris/fonts/fallback/{{ $familyID }}';
  {{- else }}
    /* No fallback stylesheet found for font family {{ .family }} at {{ $fallbankFontFamilyStylesheet }} */
    @import 'claris/fonts/fallback/{{ $fontTypeKey }}';
  {{- end }}
{{- end }}

// The font family map may have different structures:
// Simple:
// name: Alegreya; // font-family
// fallback: serif;
//
// Include additional settings such as font-weight for default, strong and italic
// styles: (
//   default: (
//     font-weight: 400
//   )
//   strong: (
//     font-weight: 700
//   )
// );
//
// Include font names and styles for alternative fontTypes:
// fontTypes: (
//   display: (
//     name: Alegreya Sans, // font-family for display type
//       styles: (
//         default: (
//           font-weight: 400
//         )
//         strong: (
//           font-weight: 700
//         )
//       )
//     )
//   )
// );
//
// Include font names and styles for alternative variants:
// variants: (
//   small-caps: (
//     name: Alegreya SC
//     styles: (
//       default: (
//         font-weight: 400
//       )
//       strong: (
//         font-weight: 700
//       )
//     );
//   )
// );

$fontFamilySpec: $fontFamilyDefault;

@if map-has-key($fontFamilyMap, $fontFamilyID) {
  $fontFamilySpec: updateMap($fontFamilySpec, map-get($fontFamilyMap, $fontFamilyID));

  $fallbackStackFamily: map-get($fontFamilySpec, fallback);
  // @if not map-has-key($fontFamilySpec, stack) {
  //   $fontStackFamily: map-get($fontFamilySpec, name), inspect($fallbackStackFamily);
  //   $fontFamilySpec: map-merge($fontFamilySpec, (stack: $fontStackFamily))
  // }
  @if map-has-key($fontFamilySpec, variants) {
    $fontFamilyVariants: ();
    $variants: map-get($fontFamilySpec, variants);
    @each $variant, $variantSpec in $variants {
      @if map-has-key($variantSpec, name) {
        $fallbackStack: defaultTo($fallbackStackFamily, map-get($variantSpec, fallback));
        // $fontStack: map-get($variantSpec, name), inspect($fallbackStack);
        // $variantSpec: map-merge($variantSpec, (stack: $fontStack) );
        $variantSpec: map-merge($variantSpec, (fallback: $fallbackStack) );
      }
      $fontFamilyVariants: map-merge($fontFamilyVariants, ($variant: $variantSpec));
    }
    $fontFamilySpec: map-merge($fontFamilySpec, (variants: $fontFamilyVariants));
  }
}

$fontFamilyMap: map-merge($fontFamilyMap, ({{ $fontTypeKey }}: $fontFamilySpec) );
$fontFamilyMap: map-merge($fontFamilyMap, ({{ $familyID }}: $fontFamilySpec) );

{{- end }}

// Feature image at top of article and section pages
// Aspect ratio: bounded by minimum and maximum
$featureImageAspectRatioMin: {{ $page.Param "assets.styles.images.feature.ratio.min" | default 2 }};
$featureImageAspectRatioMax: {{ $page.Param "assets.styles.images.feature.ratio.max" | default 4 }};
$featureImageViewportHeightMax: {{ $page.Param "assets.styles.images.feature.viewport.height.max" | default 0.5 }};

@import 'claris/variables';
@import 'claris/override';

// Additional stylesheets
@import 'claris/base';
@import 'claris/components';
{{- if (in (slice "all" "screen") $mediaType) }}
@import 'claris/components_screen';
{{- end }}
{{- if (in (slice "all" "print") $mediaType) }}
@import 'claris/components_print';
{{- end }}
@import 'claris/utils';

/*! purgecss start ignore */
@import 'claris/syntax';
/*! purgecss end ignore */
