@use "sass:meta";
@use "sass:map";
@use "sass:string";

@use "functions" as functions;
@use 'hugo:vars' as hugo;

$debug: false !default; // Set to `true` to enable debugging
$debugMaps: true and $debug !default; // Set to `true` to enable debugging of font type and role maps
$debugStyleProperties: false and $debug !default; // Set to `true` to enable debugging of style properties
$debugStyleRules: false and $debug !default; // Set to `true` to enable debugging of style rules
$debugUtilityRules: false and $debug !default; // Set to `true` to enable debugging of utility rules
$debugApply: false and $debug !default; // Set to `true` to enable debugging of applyFontStyles
$debugStyle: false and $debug !default; // Set to `true` to enable debugging of defineFontStyles
$debugVariant: false and $debug !default; // Set to `true` to enable debugging of defineFontVariants
$debugRole: false and $debug !default; // Set to `true` to enable debugging of defineFontRoles
$debugUseAs: false and $debug !default; // Set to `true` to enable debugging of defineFontUtilityClasses
$debugType: false and $debug !default; // Set to `true` to enable debugging of defineFontUtilityClasses

$debugCSSProperties: false !default; // Set to `true` to enable debugging of CSS properties

$fontTypeToFamilyMap: (
  sans: (
    id: if(hugo.$fonts_type_sans_id != "null", hugo.$fonts_type_sans_id, "source-sans-3"),
    name: if(hugo.$fonts_type_sans_name != "null", hugo.$fonts_type_sans_name, "Source Sans 3"),
    fallback_names: if(hugo.$fonts_type_sans_fallback_names != "null", hugo.$fonts_type_sans_fallback_names, "null"),
  ),
  serif: (
    id: if(hugo.$fonts_type_serif_id != "null", hugo.$fonts_type_serif_id, "alegreya"),
    name: if(hugo.$fonts_type_serif_name != "null", hugo.$fonts_type_serif_name, "Alegreya"),
    fallback_names: if(hugo.$fonts_type_serif_fallback_names != "null", hugo.$fonts_type_serif_fallback_names, "null"),
  ),
  mono: (
    id: if(hugo.$fonts_type_mono_id != "null", hugo.$fonts_type_mono_id, "dm-mono"),
    name: if(hugo.$fonts_type_mono_name != "null", hugo.$fonts_type_mono_name, "DM Mono"),
    fallback_names: if(hugo.$fonts_type_mono_fallback_names != "null", hugo.$fonts_type_mono_fallback_names, "null"),
  )
);

@if $debugMaps {
  @debug "$fontTypeToFamilyMap: #{meta.inspect($fontTypeToFamilyMap)}";
}

$fontDefinitionMap: () !default;
$currentFontDefinition: default !default;

$familyDefaultMap: (
  styles: (
    default: (
      font-weight: 400,
      line-height: 1.5
    ),
    strong: (
      font-weight: 600,
    )
  ),
  roles: (
    display: (
      styles: (
        default: (
          font-weight: 400,
          line-height: 1.2
        ),
        strong: (
          font-weight: 600,
        )
      )
    )
  )
);

$familyFallbackMap: map.merge($familyDefaultMap,
  (
    // Include font names and styles for alternative variants:
    variants: (
      all-small-caps: (
        styles: (
          default: (
            text-transform: uppercase,
            // font-size: 80%,
            // Changing the `font-weight` here does not work
            // The following rule has no effect:
            // font-weight: bold
          )
        )
      )
    )
  )
);

/// Merges two lists, adding only unique items from the second list to the first.
/// @param {List} $primary - The primary list.
/// @param {List} $secondary - The secondary list.
/// @return {List} - The merged list containing unique elements.
@function joinUnique($primary, $secondary) {
  // Initialize the result with the first list
  $result: $primary;

  // Iterate over each item in the second list
  @each $item in $secondary {
    // Check if the item is not already in the result list
    @if not index($result, $item) {
      // Append the unique item to the result list
      $result: append($result, $item);
    }
  }

  @return $result;
}

@function quoteFontFamilyIfNeeded($font-name) {
  @if str-index($font-name, ' ') {
    @return quote($font-name);
  }
  @return unquote($font-name);
}

@function quoteFontStack($stack) {
  $result: ();
  @each $font in $stack {
    $result: append($result, quoteFontFamilyIfNeeded($font), comma);
  }
  @return $result;
}

// Utility mixin to apply style definitions by defining CSS custom properties
// If $key is in $keysToDefineAsProperty, define the CSS custom property
// Currently, this is used to ensure we can access the current `line-height`
// to remove the line-height from the first line usinc `calc`
@mixin generateFontStyleProperties($defaultStyleDef, $baseStyleDef, $styleName, $styleDef) {
  @if $debugStyleProperties {
    @debug 'generateFontStyleProperties(#{$styleName}): defaultStyleDef: #{meta.inspect($defaultStyleDef)} baseStyleDef: #{meta.inspect($baseStyleDef)}';
  }
  // To enable consistently using the same style rules, we make some definitions available
  // as CSS custom properties.
  // This is used for example to have the weight of `strong` style available in `--font-weight-strong`
  // The values of some attributes such as `line-height` are required
  // for calculations.
  // List them in the following list to have them defined as CSS properties
  $keysToDefineAsProperty: ("line-height", "font-weight");

  @each $key, $value in $styleDef {
    @if index($keysToDefineAsProperty, $key) {
      $baseValue: map.get($defaultStyleDef, $key);
      @if $styleName != default {
        $baseValue: map.get($baseStyleDef, $key);
      }
      @if $value == $baseValue {
        @if $debugStyleProperties {
          @debug 'generateFontStyleProperties(#{$styleName}): value=#{$value} == #{$baseValue}';
        }
      }
      @else {
        @if $debugStyleProperties {
          @debug 'generateFontStyleProperties(#{$styleName}): value=#{$value} != #{$baseValue}';
        }
        $propertyName: $key;
        @if ($styleName != default) {
          $propertyName: #{$key}-#{$styleName};
        }
        --#{$propertyName}: #{$value};
      }
    }
  }
}

// Utility mixin to apply style definitions by defining CSS rules if they differ from default
@mixin generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef) {
  @if $debugStyleRules {
    @debug 'generateFontStyleRules(#{$styleName}): defaultStyleDef: #{meta.inspect($defaultStyleDef)} baseStyleDef: #{meta.inspect($baseStyleDef)}';
  }
  $overrideStyles: $styleDef;
  @if ($styleName == default) {
    // Determine, which values differ from default - if any
    $overrideStyles: ();
    @each $key, $value in $styleDef {
      $baseValue: map.get($defaultStyleDef, $key);
      @if ($baseValue and $value == $baseValue) {
        @if $debugStyleRules {
          @debug 'generateFontStyleRules(#{$styleName}): value=#{$value} == #{$baseValue}';
        }
      }
      @else {
        @if $debugStyleRules {
          @debug 'generateFontStyleRules(#{$styleName}): value=#{$value} != #{$baseValue}';
        }
        $overrideStyles: map.merge($overrideStyles, ($key: $value) );
      }
    }
  }
  @else {
    // Determine, which values differ from default - if any
    $overrideStyles: ();
    @each $key, $value in $styleDef {
      $baseValue: map.get($baseStyleDef, $key);
      @if ($baseValue and $value == $baseValue) {
        @if $debugStyleRules {
          @debug 'generateFontStyleRules(#{$styleName}): value=#{$value} == #{$baseValue}';
        }
      }
      @else {
        @if $debugStyleRules {
          @debug 'generateFontStyleRules(#{$styleName}): value=#{$value} != #{$baseValue}';
        }
        $overrideStyles: map.merge($overrideStyles, ($key: $value) );
      }
    }
  }

  @each $key, $value in $overrideStyles {
    #{$key}: #{$value};
  }
}

// Mixin to apply styles from a styles map
@mixin applyFontStyles($fontStackVariant, $defaultStyleDef, $baseStyleDef, $styleName, $styleDef, $baseSelector: null, $nestedSelector: null) {

  @if ($baseSelector == null) {
    @if ($styleName == default) {
      @if $debugApply {
        @debug "applyFontStyles(baseSelector: #{$baseSelector}, nestedSelector=#{$nestedSelector}): HTML DEFAULT fontStackVariant: #{meta.inspect($fontStackVariant)} defaultStyleDef: #{meta.inspect($defaultStyleDef)} baseStyleDef: #{meta.inspect($baseStyleDef)} styleDef: #{meta.inspect($styleDef)}";
      }
      font-family: #{meta.inspect($fontStackVariant)};
      @include generateFontStyleProperties($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
      @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
    }
    @else {
      @include generateFontStyleProperties($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
      #{$styleName} {
        @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
      }
    }
  }
  @else {
    @if ($nestedSelector == null) {
      @if ($styleName == default) {
        #{$baseSelector} {
          font-family: #{meta.inspect($fontStackVariant)};
          @include generateFontStyleProperties($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
          @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
        }
      }
      @else {
        #{$baseSelector} {
          @include generateFontStyleProperties($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
          #{$styleName} {
            @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
          }
        }
        #{$styleName}#{$baseSelector} {
          @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
        }
      }
    }
    @else {
      #{$baseSelector} {
        #{$nestedSelector} {
          @if ($styleName == default) {
            font-family: #{meta.inspect($fontStackVariant)};
            @include generateFontStyleProperties($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
            @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
          }
          @else {
            @include generateFontStyleProperties($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
            #{$styleName} {
              @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
            }
          }
        }
        @if ($styleName != default) {
          #{$styleName}#{$nestedSelector} {
            @include generateFontStyleRules($defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
          }
        }
      }
    }
  }
}

// Utility mixin to generate CSS rules
@mixin defineFontUtilityRules($fontStackVariant, $defaultStyleDef, $baseStyleDef, $styleName, $styleDef, $baseClassNames, $nestedClassNames: null) {
  @if length($baseClassNames) > 0 {
    $baseSelector: '.' + functions.joinArray($baseClassNames, '.');
    $nestedSelector: null;
    @if $nestedClassNames != null and length($nestedClassNames) > 0 {
      $nestedSelector: '.' + functions.joinArray($nestedClassNames, '.');
      @if $debugUtilityRules {
        @debug 'nestedSelector=#{$baseSelector} #{$nestedSelector}';
      }
    }
    @include applyFontStyles($fontStackVariant, $defaultStyleDef, $baseStyleDef, $styleName, $styleDef, $baseSelector, $nestedSelector);
  }
  @else {
    // Define the rules for the outermost element, typically HTML
    @include applyFontStyles($fontStackVariant, $defaultStyleDef, $baseStyleDef, $styleName, $styleDef);
  }
}

// Mixin to handle className combinations and generate rules
@mixin generateFontUtilityClasses($fontStackVariant, $defaultStyleDef, $baseStyleDef, $styleName, $styleDef, $classNames) {
  $len: length($classNames);
  // Generate rule for combined class
  @include defineFontUtilityRules($fontStackVariant, $defaultStyleDef, $baseStyleDef, $styleName, $styleDef, $classNames);
  @if $len > 1 {
    // Generate rules for all permutations (nested classes)
    @for $i from 1 through $len - 1 {
      $baseClassNames: functions.sliceArray($classNames, 1, $i);
      $nestedClassNames: functions.sliceArray($classNames, $i + 1, $len);
      @include defineFontUtilityRules($fontStackVariant, $defaultStyleDef, $baseStyleDef, $styleName, $styleDef, $baseClassNames, $nestedClassNames);
    }
  }
}

// Main mixin to define font styles
@mixin defineFontStyles($fontStackVariant, $defaultStyleDef, $stylesRole, $stylesVariant, $specStyles, $classNames) {
  $defaultStyle: ();
  @if length($classNames) > 0 {
    $defaultStyle: $defaultStyleDef;
  }
  // Go through all styles
  @each $styleName, $specStyle in $stylesRole {
    $baseStyleDef: functions.updateMap(map.get($stylesRole, $styleName), map.get($stylesVariant, $styleName) );
    $styleDef: functions.updateMap($baseStyleDef, $specStyle);

    @if length($classNames) == 0 {
      $baseStyleDef: ();
    }

    @if $debugStyle {
      @debug 'defineFontStyles: defaultStyleDef: #{meta.inspect($defaultStyleDef)} baseStyleDef: #{meta.inspect($baseStyleDef)} styleDef: #{meta.inspect($styleDef)}';
      // Note: To avoid an invalid CSS value error when $classNames is empty,
      // we append an empty list to it
      @debug 'defineFontStyles: call generateFontUtilityClasses(#{nth($fontStackVariant, 1)}, styleName=#{$styleName}, classNames=#{append($classNames, ())})';
    }

    // Generate rules
    @include generateFontUtilityClasses($fontStackVariant, $defaultStyle, $baseStyleDef, $styleName, $styleDef, $classNames);
  }
}

// Main mixin to define font variants
@mixin defineFontVariants($fontNameRole, $fallbackStackRole, $defaultStyleDef, $stylesRole, $specVariants, $classNames) {
  // Go through all variants
  @each $variant, $specVariant in $specVariants {
    $variantClassNames: $classNames;
    $specStyles: map.get($specVariant, styles);

    @if $variant != default {
      $variantClassNames: append($variantClassNames, variant- + $variant);
    }

    $fontNameVariant: functions.defaultTo($fontNameRole, map.get($specVariant, 'name'));
    $fallbackStackVariant: functions.defaultTo($fallbackStackRole, map.get($specVariant, 'fallback'));
    $fontStackVariant: quoteFontStack(join(($fontNameVariant,), $fallbackStackVariant, comma));

    $stylesVariant: map.get($specVariant, 'styles');
    // Note: To avoid an invalid CSS value error when $variantClassNames is empty,
    // we append an empty list to it
    @if $debugVariant {
      @debug 'defineFontVariants: call defineFontStyles(#{$fontNameRole}, classNames=#{append($variantClassNames, ())})';
    }
    @include defineFontStyles($fontStackVariant, $defaultStyleDef, $stylesRole, $stylesVariant, $specStyles, $variantClassNames);
  }
}

@mixin defineFontRoles($specFamily, $classNames: () ) {
  // Default fallback stack to be used if all else fails.
  // Ensure to define a list here. If there is only one fallback font, append a comma: ('Fallback Font', )
  $fallbackStackDefault: ('Arial', );

  $fontNameFamily: map.get($specFamily, name);
  $fallbackStackFamily: functions.defaultTo($fallbackStackDefault, map.get($specFamily, fallback));

  @if $debugRole {
    @debug 'defineFontRoles: fallbackStackFamily=#{meta.inspect($fallbackStackFamily)}';
  }

  $defaultStyleDef: map.get(map.get($familyDefaultMap, styles), default);

  $specStyles: functions.updateMap(map.get($familyDefaultMap, styles), map.get($specFamily, styles));

  $specRolesDefault: functions.updateMap((default: (styles: $specStyles)), map.get($familyDefaultMap, roles));
  $specRoles: functions.updateMap($specRolesDefault, map.get($specFamily, roles));

  @if $debugRole {
    @debug 'defineFontRoles: specRoles=#{meta.inspect($specRoles)}';
  }

  $specVariantsDefault: functions.updateMap((default: (
    name: $fontNameFamily,
    fallback: $fallbackStackFamily,
    styles: $specStyles
  )), map.get($familyDefaultMap, variants));

  $specVariants: functions.updateMap($specVariantsDefault, map.get($specFamily, variants));
  @if $debugCSSProperties {
    @include mapToCSSProperties($specStyles, specStyles);
    @include mapToCSSProperties($specRoles, specRoles);
    @include mapToCSSProperties($specVariants, specVariants);
  }
  // Go through all roles (default, display etc.) that are defined
  // for this font family's specification
  @each $role, $specRole in $specRoles {
    $defRole: functions.updateMap(map.get($specRoles, default), $specRole);
    $fontNameRole: functions.defaultTo($fontNameFamily, map.get($specRole, name));
    $fallbackStackRole: functions.defaultTo($fallbackStackFamily, map.get($specRole, fallback));

    $stylesRole: functions.updateMap($specStyles, map.get($specRole, styles));
    @if $role != default {
      $classNames: append($classNames, role- + $role);
    }
    // Note: To avoid an invalid CSS value error when $classNames is empty,
    // we append an empty list to it
    @if $debugRole {
      @debug 'defineFontRoles: call defineFontVariants(#{$fontNameRole}, classNames=#{append((), $classNames)})';
    }
    @include defineFontVariants($fontNameRole, $fallbackStackRole, $defaultStyleDef, $stylesRole, $specVariants, $classNames);
  }
}

@mixin defineFontUtilityClasses($specFamily, $useAs: default) {
  $useAs: if(type-of($useAs) == list, $useAs, ($useAs,));
  @if $debugType {
    @debug 'defineFontUtilityClasses: useAs=#{meta.inspect($useAs)}';
  }
  $outerClassNames: ();
  $classNames: ();

  // Create a list of selectors for all types (sans, serif, mono) and roles (default,
  // display etc.) for which this font family is used
  $selectorList: ();
  // If the font family is used as default, add 'html' to the selector list
  @if index($useAs, default) {
    $selectorList: (html, $selectorList);
  }

  // If the font family is used as monospace font, add 'pre' and 'code' to the selector list
  @if index($useAs, mono) {
    $selectorList: (pre, code, $selectorList);
  }

  // Append each font type and role as a 'font-{name}' selector
  @each $use in $useAs {
    $selectorList: append($selectorList, unquote(".font-#{$use}"), comma);
  }
  @if $debugType {
    @debug 'defineFontUtilityClasses: selectorList=#{$selectorList}: call defineFontRoles(classNames=#{append( (), $classNames)})';
  }
  #{$selectorList} {
    @include defineFontRoles($specFamily, $classNames);
  }
}

