.main {
  &_claris {
    background: var(--choice-bg);
    @include color-scheme_transition;
    z-index: $main-z-index;
    // @include link-lvhfa;
  }
  &_inner {
    // margin-top: var(--inner_margin)
    @include element-padding('inner', 0, unset, unset, unset);
    clear: both;
    h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }
    padding: 0 0 var(--body_padding) 0;
  }
}

.content + .content {
  padding-top: var(--body_padding);
}
.content {
  @include content;
  @include link-lvhfa;
  &_singlecolumn {
    @include content_singlecolumn;
    &:first-child:last-child {
      @include container_singlecolumn;
    }
  }
  &_multicolumn {
    @include content_multicolumn;
    &:first-child:last-child {
      @include container_multicolumn;
    }
  }
  &_full-bleed {
    @include content_full-bleed;
    &:first-child:last-child {
      @include container_full-bleed;
    }
  }
}

.container {
  @include container;
  &_singlecolumn {
    @include container_singlecolumn;
  }
  &_multicolumn {
    @include container_multicolumn;
  }
  &_full-bleed {
    @include container_full-bleed;
  }
}

.panel {
  &_container {
    // font-size: var(--font-size-larger-1);
    @extend .article_body;
    clear: both;
    p, ul, ol {
      &:first-child {
        margin-top: calc(1em * (1 - 0.92 * var(--line-height)));
      }
    }
    &.layout {
      &-flex {
        display: flex;
        flex-direction: column;
      }
      &-grid {
        display: grid;
        column-gap: var(--inner_margin);
      }
    }
  }
  &_title {
    margin: calc(1em * (1 - var(--line-height-heading))) 0 var(--inner_margin) 0;
    padding: 0;
    .layout-flex & {
      font-size: 150%;
    }
    .layout-grid & {
      grid-row: 1;
      font-weight: var(--font-weight);
      padding-bottom: var(--inner_margin_4-1);
    }
  }
  &_content {
    --header-text: var(--text);
    h3 {
      font-size: 125%;
    }
    &.background-dark {
      color: var(--text-dark);
      h2,
      h3 {
        color: var(--text-dark);
      }
    }
    .layout-grid & {
      grid-row: 2;
    }
  }
  &_item {
    border-top: 2px solid var(--text-faint);
    padding: var(--inner_padding) 0;
    @include color-scheme_transition;
    background: var(--choice-bg);
    // &-0
    //   background: var(--theme-bg-hue-0)
    // &-1
    //   background: var(--theme-bg-hue-1)
    // &-2
    //   background: var(--theme-bg-hue-2)
    // &-3
    //   background: var(--theme-bg-hue-3)
    // &-4
    //   background: var(--theme-bg-hue-4)
    // &-5
    //   background: var(--theme-bg-hue-5)
    // &.background-dark
    //   &-0
    //     background: var(--dark-bg-hue-0)
    //   &-1
    //     background: var(--dark-bg-hue-1)
    //   &-2
    //     background: var(--dark-bg-hue-2)
    //   &-3
    //     background: var(--dark-bg-hue-3)
    //   &-4
    //     background: var(--dark-bg-hue-4)
    //   &-5
    //     background: var(--dark-bg-hue-5)
    &_inner {
      margin: 0 auto;
      max-width: var(--content_multicolumn_max-width);
    }
    &_content {
      @include body_horizontal-padding();
    }
    .layout-grid & {
      &-1 {
        grid-column: 1;
      }
      &-2 {
        grid-column: 2;
      }
      &-3 {
        grid-column: 3;
      }
      &-4 {
        grid-column: 4;
      }
      &-5 {
        grid-column: 5;
      }
    }
  }
}
.card {
  &_container {
    color: var(--text);
    margin-top: var(--inner_margin);
    .layout-flex & {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      gap: var(--inner_margin);
      // FIXME: IE 11 bug
      // https://github.com/philipwalton/flexbugs/issues/75
      // Setting a min-height on the container (body does not work)
      // avoids scaled images taking up as much space as they would if not scaled
      // FIXME: Does not work. responsive-figure images still blow up
      @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
        & {
          justify-content: space-evenly;
        }
      }
    }
    .layout-grid & {
      grid-row: 3;
    }
  }
  &_title {
    margin: calc(1em * (1 - var(--line-height-heading))) 0 var(--inner_margin) 0;
    padding: 0;
  }
  &_item {
    h3,
    h4 {
      margin-top: 0;
    }
    .layout-flex & {
      display: block;
      flex: 1 1 10%;
      background: var(--bg);
      @include drop-shadow(3rem, 0.1, 0.1);
      @include color-scheme_transition;
      @include inner_padding;
      min-width: calc(min(100%, ($screenViewBreakpointWidthWide - 1 * var(--inner_margin)) / 2));
      @media screen and (min-width: $screenViewBreakpointWidthWide) {
        &:nth-child(odd) {
          border-radius: 0 0.5em 0.5em 0;
        }
        &:nth-child(even) {
          border-radius: 0.5em 0 0 0.5em;
        }
      }
    }
    .layout-grid & {
      &-1 {
        grid-row: 2;
      }
      &-2 {
        grid-row: 3;
      }
      &-3 {
        grid-row: 4;
      }
      &-4 {
        grid-row: 5;
      }
      &-5 {
        grid-row: 6;
      }
    }
  }
  &_figure {
    margin: var(--inner_margin) auto;
    max-width: 80%;
    img {
      display: block;
      object-fit: cover;
    }
    @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
      float: left;
      margin: calc(1em * (0.92 * var(--line-height) - 1)) var(--inner_margin) var(--inner_margin) 0;
      img {
        width: 8rem;
        width: clamp(8rem, 4rem + 20vw, 16rem);
      }
    }
}
}

/*
 * Claris FOOTER
 */

.footer_claris {
  @include background_dark;
  // For IE 11
  // font-size: 1rem;
  // font-size: var(--font-size-footer);

  @include geometric-scale('font-size', var(--font-size-footer));
  font-size: var(--font-size-footer);

  // FIXME: IE 11 bug
  // https://github.com/philipwalton/flexbugs/issues/75
  // Setting a min-height on the container (body does not work)
  // avoids scaled images taking up as much space as they would if not scaled
  // For IE 11
  min-height: 1px;
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0;
    padding: 0;
  }
  h2 {
    font-size: var(--font-size-larger-1);
  }
  // border-top: 1px solid var(--xhaze)
  // background: var(--footer-bg)
  padding-top: var(--body_padding);
  // padding-bottom: var(--body_padding)
  @include list-style_indented(0, 0, 0, 0);
  z-index: ($main-z-index  - 1);

  // @media screen and (min-width: $screenViewBreakpointWidthOneColumn) {
  //   // For IE 11
  //   font-size: 1rem;
  //   font-size: var(--font-size-footer);
  // }

  .footer {
    &_inner {
      h2 + p, h2 + ul {
        margin-top: var(--inner_margin_4-2);
      }
      @include footer;
      // ul {
      //   margin: 0;
      //   padding: 0;
      // }
      // ul > li {
      //   list-style: none;
      //   margin-left: 0;
      //   padding-left: 0;
      // }

      // https://codepen.io/tutsplus/details/yWrEgW
      .icon-link {
        display: flex;
        flex-direction: column;
        align-items: center;
        @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
          flex-direction: row;
        }
      }
    }
    &_copyright {
      @include footer;
      padding-top: var(--inner_padding);
      padding-bottom: var(--inner_padding);
      font-size: var(--font-size-meta);
    }

    // Footer main
    &_main {
      display: flex;
      flex-wrap: wrap;
      @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
        justify-content: space-evenly;
      }

      &-item {
        padding-bottom: var(--inner_padding_4-3);
        min-height: 1px;
        min-width: min(80%, max(20%, 16em));
        flex: 1 1 min-content;
      }
    }
    // Footer external links
    &_links {
      display: flex;
      justify-content: center;
      align-items: flex-start;
      flex-wrap: wrap;
      border-top: 1px var(--xxhaze) solid;
      column-gap: 1em;
      ul > li, ul > li + li {
        padding: var(--inner_padding_4-3) var(--inner_padding_4-2);
      }
      &_social,
      &_generator {
        display: flex;
        justify-content: center;
      }
      &_generator {
        flex-wrap: nowrap;
        li {
          flex: 1 1 auto;
        }
      }
    }
    // Footer legal
    &_legal {
      &-list {
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        li {
          // one before the last child
          &:nth-last-child(2) {
            flex: 1;
          }
        }
      }
    }
  }
}

/*
 * Components that might be in header, main, or footer
 */

.button {
  background-color: var(--theme);
  color: var(--theme-text);
  display: inline-flex;
  padding: 0.5em 1em;
  // text-transform: uppercase
  text-transform: none;
  border: 1px solid var(--translucent);
  border-radius: 99rem;
  font-size: var(--font-size-button);
  align-items: center;
  user-select: none;

  &:hover,
  &:focus {
    background-color: var(--theme-bg-hover);
    color: var(--theme-text-hover);
    border: 1px solid var(--theme-bg-hover);
  }
  &_translucent {
    background-color: var(--theme-bg);
    // color: var(--theme)
    // Ensure contrast ration meets Chrome / Lighthouse requirements
    color: var(--text);
    // border: 1px solid transparent
    border: 1px solid rgba(var(--RGB_theme), 0.1);
  }
  &_tally {
    padding: 0 0.25em 0 0.5em;
    // border-radius: 0.5em;
    // background-color: var(--choice-bg);
    // background-color: rgba(var(--RGB_bg), 80%);
    // display: inline-flex;
    // justify-content: center;
    // align-items: center;
    // Ensure constrast ratio requirements are met
    // color: var(--theme-text)
    color: var(--text);
    margin: 0.125em 0 0.125em 0.5em;
    // Minimal size for mobile users
    font-size: var(--font-size-smaller-2);
    border-left: 1px solid var(--xxhaze);
  }
  &:hover,
  &:focus,
  .article_content &:hover,
  .article_content &:focus,
  .sidebar &:hover,
  .sidebar &:focus {
    @media (any-hover: hover) {
      background-color: var(--theme-bg-hover);
      border: 1px solid var(--theme-text-hover);
    }
  }
  &_translucent,
  .article_content &_translucent,
  .sidebar &_translucent {
    // background-color: rgba(var(--RGB_text), 10%);
    background-color: rgba(var(--RGB_xhaze), 10%);
    // Ensure constrast ratio requirements are met
    color: var(--text);
      // border: 1px solid transparent
    // border: 1px solid rgba(var(--RGB_text), 20%);
    border: 1px solid rgba(var(--RGB_xhaze), 100%);
    &:hover,
    &:focus {
      @media (any-hover: hover) {
        color: var(--text-hover);
        // background-color: var(--bg-hover);
        background-color: rgba(var(--theme-bg-hover), 100%);
        // border: 1px solid var(--text-hover);
        border: 1px solid var(--xxxhaze);
      }
    }
  }
}
.article {
  &_link {
    margin-top: 0;
    margin-bottom: 0;
  }
  &s {
    margin-top: 2rem;
  }
  &_link.grid {
    // FIXME: Height 100% required for Safari
    height: 100%;
  }
  &_tag,
  &_meta_tag {
    // padding: 0 0.75em;
    padding: 0.25em 0.75em;
    font-size: var(--font-size-meta);
  }
  &_tag,
  &_share {
    margin: 0.5em;
  }
  &_share {
    display: inline-flex;
  }
  &_meta {
    display: inline-flex;
    flex-flow: row wrap;
    align-items: center;
    // margin: calc(-1 * var(--inner_padding_4-1));
    margin: 0 calc(-1 * var(--inner_padding_4-1)) var(--inner_padding_4-3);
    color: var(--text-faint);
    // @include useFontDefinition(meta);
    // @extend .font-meta;
    @include link-lvhfa;
    span {
      align-items: center;
    }
    &_item {
      padding: var(--inner_padding_4-1) var(--inner_padding_4-1);
    }
    .icon {
      width: var(--icon-height-meta);
      height: var(--icon-height-meta);
      margin: calc( (var(--line-height) * 1em - var(--icon-height-meta)) / 4 * 1)
      0.5ch
      calc( (var(--line-height) * 1em - var(--icon-height-meta)) / 4 * 3)
      0;
    }
    &_tag-list {
      column-gap: var(--inner_padding_4-1);
      font-size: var(--font-size-meta);
    }
    &_tag {
      margin: 0.125em var(--inner_padding_4-1);
    }
    &_date,
    &_reading-time {
      font-size: var(--font-size-meta);
    }
    &_date + &_date {
      margin-left: 1ch;
    }
    &_author {
      display: inline-flex;
      align-items: center;
      img {
        width: 3rem;
        height: auto;
        padding: var(--inner_padding_4-1) var(--inner_padding_4-1);
      }
    }
    &_taxonomy {
      display: inline-flex;
      align-items: center;
      flex-wrap: wrap;
      gap: var(--inner_padding_4-2) var(--inner_padding_4-2);
    }
  }
  &_content {
    @include list-style_indented;
    @include color-scheme_transition;
    // h2 {
    //   font-size: var(--font-size-larger-1);
    // }
  }
  &_body {
    // For IE 11, otherwise responsive images exceed the width of .article_body
    width: 100%;
    & > * + * {
      margin-top: calc(2em * (var(--line-height) - 1));
    }

    p + p {
      margin-top: calc(2em * (var(--line-height) - 1));
    }
  }
  // FIXME: Experiment with displaying h3 and lower headings inline
  &_content, &_body {
    & > h2 {
      margin: calc(1em * (var(--line-height-heading) - 1) * 4) 0 calc(1em * (var(--line-height-heading) - 1)) 0;
      &:first-child {
        margin-top: calc( (1 - var(--line-height-heading) ) * 1em);
      }
      & + * {
        margin-top: 0;
      }
      clear: both;
    }
    & > h3, & > h4, & > h5, & > h6 {
      display: inline;
      font-size: var(--font-size-normal);
      &::before {
        content: "";
        display: block;
        margin-top: calc(2em * (var(--line-height) - 1));
      }
      &::after {
        content: ". ";
        display: inline;
      }
      &.heading_link {
        margin-right: 0;
        .link.icon {
          display: none;
        }
      }
      & + p {
        display: inline;
      }
    }
  }
}

.article_aside {
  display: none;
  position: sticky;
  // margin: 0.8rem 0 1rem auto
  // margin: 0 0 var(--inner_margin) auto;
  margin: 0 auto var(--inner_margin) 0;
  // top: calc(#{$screenViewNavHeight} + 5vh)
  top: calc(#{$screenViewNavHeight} + #{$screenViewInnerPaddingOneColumn});
  align-self: start;
  border-radius: 0.25rem;
  // padding: 0.5rem 1rem 0 1rem
  // Replaced by utility classes
  // @include useFontDefinition(meta);
  // background: rgba(var(--RGB_bg), 0.9)
  // https://stackoverflow.com/a/66962139/617559
  // width: fit-content
  // display: flex
  // align-items: center
  // @supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none))
  //   background: linear-gradient(180deg, rgba(var(--RGB_bg), 0.8) 0%, rgba(var(--RGB_bg), 0.8) 80%, rgba(var(--RGB_bg), 0.8) 100%)
  //   backdrop-filter: blur(50px)
  //   -webkit-backdrop-filter: blur(50px)
  // &::after {
  //   position: absolute;
  //   content: "";
  //   top: 0;
  //   bottom: 0;
  //   padding: 0.5px;
  //   background: var(--xhaze);
  //   background: linear-gradient(to bottom, var(--xhaze), var(--haze), var(--xhaze), var(--xhaze), var(--haze), var(--xhaze));
  //   @include color-scheme_transition;
  // }
  @media screen and (min-width: $screenViewBreakpointWidthTwoColumn) {

    // Don't show any article aside if the browser does not support grid
    // as it cannot be placed next to the article without grid
    @supports (display: grid) {
      display: block;
    }
  }
}
.table_of_contents {
  visibility: hidden;
}
.outdated {
  &_wrap {
    background: none;
    padding: 2em 0 0 0;
    position: relative;
    z-index: 1;
    // Replaced by utility classes
    // @include useFontDefinition(meta);

    h2 {
      font-size: 150%;
    }
    h3 {
      font-size: 120%;
    }
    h4 {
      font-size: 100%;
    }
    h2,
    h3,
    h4,
    h5 {
      margin: 0;
      padding: 0;
    }
    p {
      margin: 0;
    }
  }
  & {
    width: 80%;
    padding: 0.5rem 1.5rem 1rem 1.5rem;
    margin: 0 auto 1.5rem auto;
    position: relative;
    background-color: var(--haze);
    @include color-scheme_transition;
  }
}

.lede {
  margin: 0 0 2em 0;
  font-size: var(--font-size-lede);
}

.initial {
  --initial_font-size: 7em;
  --initial_line-height: 1.5;
  --initial_padding: calc(var(--initial_font-size) / 76);
  --initial_margin-negative: calc(var(--initial_font-size) / -13);
  --initial_margin-top: calc(var(--initial_margin-negative));
  --initial_margin-right: 0px;
  --initial_margin-bottom: var(--initial_margin-negative);
  --initial_margin-left: calc(var(--initial_margin-negative) / 16);
  margin-top: 2em;
  min-height: calc(var(--initial_font-size) / 1.4);
  .initial-letter {
    color: var(--initial);
    float: left;
    font-size: var(--initial_font-size);
    line-height: var(--initial_line-height);
    padding: 0 var(--initial_padding) 0 0;
    margin: var(--initial_margin-top)
    var(--initial_margin-right)
    var(--initial_margin-bottom)
    var(--initial_margin-left);
  }
  /*
  .initial-words {
    // @include useFontDefinition(inherit, default, small-caps, strong);
    @extend .variant-small-caps;
  }
  */
}

.main_header .feature-image {
  &_figure {
    margin: 0;
    padding: 0;
  }
  &_img {
    margin: 0;
    padding: 0;
    max-width: unset;
    max-height: unset;
    width: 100%;
    height: auto;
    object-fit: cover;
    object-position: center center;
    border-radius: 0;
  }
}
.main_header {
  position: relative;
  grid-column: 3;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  z-index: ($main-z-index + 2);
  .content-title {
    @include content_multicolumn;
    --title_line-height: calc(var(--font-size-title) * var(--line-height-heading));
    margin: calc(0.5 * var(--title_line-height)) auto;
    // @extend .role-display;
    @media screen and (min-width: $screenViewBreakpointWidthTwoColumn) {
      // min-width: calc(var(--content_max-width) - var(--inner_margin) * 2);
      min-width: var(--content_max-width);
    }
    padding: 0;
    width: fit-content;
    text-align: unset;
    color: var(--header-text);
    z-index: ($main-z-index + 5);
    hyphens: manual;
    h1 {
      font-size: var(--font-size-title);
      margin: 0;
      padding: 0;
    }
    .supertitle {
      display: block;
      font-size: var(--font-size-supertitle);
      // padding: 1.5rem 0 0.25rem 0;
      text-align: start;
      // Replaced by utility classes
      // @include useFontDefinition(inherit, display, small-caps, strong);
    }
    .subtitle {
      display: block;
      margin-top: 0.5em;
      text-align: end;
      font-size: var(--font-size-subtitle);
      font-weight: var(--font-weight-subtitle);
    }
  }
  &.feature-image {
    &_style {
      &-wide {
        // Style: wide
        $border_overlap_fraction: 0.1;
        $border_overlap_in_viewport-width: 0.1 * 100vw;
        $transition_factor: 1e9;

        --feature-image_max-height: min(
          #{ math.div(1, $featureImageAspectRatioMin) * 100vw},
          #{$featureImageViewportHeightMax * 100vh},
          #{ math.div(1, $featureImageAspectRatioMin) * $screenViewBreakpointWidthWide}
        );

        --feature-image_max-width: min(
          100vw,
          #{$featureImageAspectRatioMax * $featureImageViewportHeightMax * 100vh},
          #{ math.div($featureImageAspectRatioMax, $featureImageAspectRatioMin) * $screenViewBreakpointWidthWide}
        );

        @function feature-image_border-width($factor: 1) {
          @return min(
            $factor * $border_overlap_in_viewport-width,
            $factor * $border_overlap_fraction * var(--feature-image_max-width)
          )
        }

        // .content-title {
        //   @include content_multicolumn;
        //   --title_line-height: calc(var(--font-size-title) * var(--line-height-heading));
        //   margin: calc(0.5 * var(--title_line-height)) auto;
        //   @media screen and (min-width: $screenViewBreakpointWidthTwoColumn) {
        //     // min-width: calc(var(--content_max-width) - var(--inner_margin) * 2);
        //     min-width: var(--content_max-width);
        //   }
        //   padding: 0;
        //   width: fit-content;
        //   text-align: unset;
        // }

        .feature-image {
          &_figure {
            display: grid;
            // NOTE: In the future we might be available limiting the main column to 100%
            // by using `100svw` for the width of the feature image
            // https://caniuse.com/viewport-unit-variants
            grid-template-columns:
              minmax(0px, 1fr)
              min(var(--feature-image_max-width), 100%)
              minmax(0px, 1fr);
            picture, noscript {
              grid-column: 2;
            }
            .background {
              --background_gradient_end-position: #{feature-image_border-width( math.div(1, 2) )};
              z-index: ($main-z-index + 3);
              &.left, &.right {
                display: block;
              }
              &.left {
                grid-column: 1;
                margin-right: calc(
                  max(
                    min(0px,
                      var(--feature-image_max-width)
                      - #{feature-image_border-width(0.9)}
                      - 100vw * (1.01 - #{$border_overlap_fraction})) * #{$transition_factor},
                    #{feature-image_border-width( math.div(-1, 2) )}
                ) );
                background: linear-gradient(270deg, transparent 0px, var(--background_dominant-color) var(--background_gradient_end-position) );
              }
              &.right {
                grid-column: 3;
                margin-left: calc(
                  max(
                    min(0px,
                      var(--feature-image_max-width)
                      - #{feature-image_border-width(0.9)}
                      - 100vw * (1.01 - #{$border_overlap_fraction})) * #{$transition_factor},
                    #{feature-image_border-width( math.div(-1, 2) )}
                ) );
                background: linear-gradient(90deg, transparent 0px, var(--background_dominant-color) var(--background_gradient_end-position) );
              }
            }
          }
          &_img {
            max-height: var(--feature-image_max-height);
            max-width: var(--feature-image_max-width);
          }
        }
      }
      &-aside {
        .content-title {
          @include inner_horizontal-padding;
        }
        .feature-image {
          &_figure {
            float: left;
          }
          &_img {
            margin: 0;
            padding: 0;
            // max-width: unset
            max-height: unset;
            width: auto;
            max-width: 40vw;
            // FIXME: Minimal aspect ratio should be 1:3
            max-width: calc(min(40vh, 33vw));
            height: 100%;
            object-fit: cover;
            object-position: center center;
            border-radius: 0;
            @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
              max-width: 30vw;
              // FIXME: Maximal aspect ratio should be 1:2
              max-width: calc(min(30vw, 50vh));
            }
          }
        }
      }
      &-background {
        display: grid;
        grid-template-columns: 0px 3fr 1fr 3fr 0px;
        // grid-template-rows: minmax(0px, 2fr) 5fr minmax(0px, 1fr)
        grid-template-rows: minmax(0px, 1fr) 8fr minmax(0px, 3fr);
        min-height: 33vw;
        @media screen and (min-width: $screenViewBreakpointHeightTall) {
          min-height: 25vw;
        }
        max-height: 75vh;
        @media screen and (min-width: $screenViewBreakpointWidthTwoColumn) {
          max-height: 33vh;
        }
        .content-title {
          @include body_horizontal-padding;
          margin: 0 auto;
          width: fit-content;
          grid-column: 4;
          grid-row: 2;
          @media screen and (min-width: $screenViewBreakpointWidthWide) {
            grid-column: 3 / span 2;
          }
        }
        .feature-image {
          &_figure {
            grid-column: 1 / span all;
            grid-row: 1 / span 3;
          }
          &_img {
            margin: 0;
            padding: 0;
            max-width: 100%;
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center center;
            border-radius: 0;
          }
        }
      }
    }
    &_overlay {
      &_color-white {
        color: white;
        --header-text: white;
        // For IE 11 and other browsers that don't support CSS custom properties
        h1#articleTop {
          &, &.supertitle, .supertitle, &.subtitle, .subtitle {
            color: white;
          }
        }
      }
      &_position-left {
        .content-title {
          grid-column: 2;
        }
      }
    }
  }
}
.hero-image_background {
  &_main {
    position: relative;
    padding-bottom: 0;
    .main_header {
      height: 30vh;
      @supports (margin: clamp(1px, 1vw, 1px)) {
        height: unset;
        min-height: clamp(
          math.div($screenViewBreakpointHeightTall, 4),
          75vh - math.div($screenViewBreakpointHeightTall, 8),
          100vh
        );
      }
    }
    .main_inner {
      position: relative;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      align-items: center;
      z-index: ($main-z-index + 2);
    }
    .content-title {
      position: relative;
      color: white;
      text-shadow: 1.5px 1.5px 1.5px black;
      --font-size-title: var(--font-size_heading-larger-5);
      --font-size-subtitle: var(--font-size_heading-larger-2);
      --header-text: white;
      // For IE 11 and other browsers that don't support CSS custom properties
      h1#articleTop {
        &, &.supertitle, .supertitle, &.subtitle, .subtitle {
          color: white;
        }
      }
      text-align: center;
      margin-bottom: 2rem;
    }
    &_figure {
      display: none;
    }
    .article_content {
      padding-top: var(--body_padding_4-4);
      padding-bottom: var(--body_padding_4-4);
      background: var(--choice-bg);
      .article_body:first-child {
        margin-top: calc( (1 - var(--line-height)) * 1em);
      }
    }
    .article_aside, .sidebar {
      display: none;
    }
    & ~ .footer_claris {
      position: relative;
      z-index: ($main-z-index + 1);
      background: var(--bg-dark);
      @include color-scheme_transition;
      color: var(--text-dark);
      h1,
      h2,
      h3,
      a {
        color: var(--text-dark);
      }
    }
  }
  &_figure {
    display: block;
    position: fixed;
    top: 0;
    z-index: ($main-z-index - 1);
    width: 100%;
    margin-bottom: calc(0px - var(--inner_padding));
  }
  &_img {
    margin: 0;
    padding: 0;
    border-radius: 0;
    width: 100%;
    height: 100vh;
    height: 100lvh;
  }
}

// Wrap div around tables to make them scrollable
//! purgecss start ignore
.scrollable-table {
  display: grid;
  width: 100%;
  max-width: 100%;
  overflow-x: auto;
}
//! purgecss end ignore

.inline-separator-list {
  // Does not appear to have an effect
  // @include useFontDefinition;
  p {
    color: var(--text-faint);
  }
  @include inline-separator-list;
}

//! purgecss start ignore
.taxonomy-overlay {
  $taxonomy-overlay_transition_button: background 0.2s ease-out;
  &_container {
    display: none;
    &.jswidgetopen {
      display: block;
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      overflow-y: auto;
      width: 100vw;
      padding: 5rem 1.5rem;
      background: var(--translucent);
      cursor: pointer;
      z-index: 999;
      overflow-y: auto;
    }
    .article_meta_tag {
      margin: 0.25em 0.5em;
      font-size: var(--font-size-meta);
    }
  }
  &_toggle {
    margin: 0.5rem;
    // margin-left: 0.5rem;
    cursor: pointer;
  }
  &_list {
    cursor: auto;
    background: var(--bg-hover);
    padding: 6rem 1.5rem 1.5rem 1.5rem;
    border-radius: 1rem;
    max-width: 40rem;
    margin: 0 auto;
    box-shadow: 0 0.5rem 1.5rem rgba(0,0,0,0.12);
    position: relative;
    display: flex;
    flex-flow: row wrap;
  }
  &_nav {
    position: relative;
    margin: 0 -0.5rem;
  }
  &_hide {
    position: absolute;
    top: 2rem;
    right: 2rem;
    padding: 0.5rem;
    border-radius: 50%;
    cursor: pointer;
  }
  &_sort {
    // font-size: 1rem;
    color: var(--text);
    background: var(--theme-bg);
    position: absolute;
    top: 2rem;
    left: 2rem;
    border-radius: 999rem;
    padding: 0.1rem 1rem;
    display: flex;
    gap: 2rem;
    &,
    &_button {
      user-select: none;
    }
    &_button {
      display: inline-flex;
      justify-content: center;
      align-items: center;
      height: 3rem;
      position: relative;
      z-index: 5;
      cursor: pointer;
      width: auto;
      &::before {
        content: "";
        position: absolute;
        top: 0;
        right: -1rem;
        bottom: 0;
        left: -1rem;
        z-index: 3;
        opacity: 0.5;
        background: var(--theme-bg);
        border: 1px solid var(--bg);
        border-radius: 999rem;
        transition: $taxonomy-overlay_transition_button;
      }
      &_alphabetically {
        font-weight: bolder;
        z-index: 10;
        &::before {
          background: var(--theme-bg-hover);
        }
      }
    }
    &.taxonomy-overlay_sorted {
      .taxonomy-overlay_sort_button {
        &_alphabetically {
          z-index: 5;
          font-weight: normal;
          &::before {
            background: var(--theme-bg);
          }
        }
        &_frequency {
          z-index: 10;
          font-weight: bolder;
          &::before {
            background: var(--theme-bg-hover);
          }
        }
      }
    }
  }
  &-title {
    border-bottom: none !important;
    display: inline-block !important;
    position: relative;
    font-size: 2rem;
    margin-bottom: -1rem;
    &::after {
      content: attr(data-count);
      margin-left: 1.5rem;
      background-color: #eee;
      padding: 0.25rem 1rem;
      border-radius: 15%;
      font-size: 1.5rem;
    }
  }
}
//! purgecss end ignore

.icon {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  margin: 0 0.5rem;
  &,
  img,
  svg {
    width: var(--icon-height);
    height: var(--icon-height);
  }
  &_2 {
    width: calc(2 * var(--icon-height));
    height: calc(2 * var(--icon-height));
  }
}
.fa-icon {
  // width: 1em
  height: auto;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  // margin: 0 0.5rem
  width: 1.2em;
  // height: 1.2em
  flex: none;
  &-large {
    width: 2.4em;
  }
}
.qrcode-svg {
  background: var(--bg);
  min-width: 64px;
  width: 80%;
  max-width: 96px;
  height: auto;
}
svg.qrcode-svg {
  fill: var(--text);
  stroke: var(--text);
}
.qrcode-svg {
  svg {
    fill: transparent;
  }
}
@media screen {
  html[data-color-scheme="dark"] {
    svg.qrcode-svg {
      fill: var(--text);
      stroke: var(--text);
    }
    .qrcode-svg {
      svg {
        background: transparent !important;
        fill: transparent !important;
        path {
          stroke: var(--text) !important;
          fill: var(--text) !important;
        }
        text {
          stroke: var(--text) !important;
          fill: var(--text) !important;
        }
      }
    }
  }
}
@media screen and (prefers-color-scheme: dark) {
  html:not([data-color-scheme="light"]) {
    svg.qrcode-svg {
      fill: var(--text);
      stroke: var(--text);
    }
    .qrcode-svg {
      svg {
        background: transparent !important;
        fill: transparent !important;
        path {
          stroke: var(--text) !important;
          fill: var(--text) !important;
        }
        text {
          stroke: var(--text) !important;
          fill: var(--text) !important;
        }
      }
    }
  }
}
.link {
  @extend .font-meta !optional;
  opacity: 0;
  position: relative;
  &_yank {
    opacity: 1;
    &ed {
      position: absolute;
      right: -1rem;
      top: -2rem;
      background-color: var(--theme-hover);
      color: var(--theme-text-hover);
      // Replaced by @extend
      // @include useFontDefinition(meta);
      width: auto;
      white-space: nowrap;
      padding: 0.25rem 0.75rem;
      font-size: var(--font-size-meta);
      line-height: var(--line-height);
      font-weight: var(--font-weight);
      border-radius: 1rem;
      text-align: center;
      &::before {
        position: absolute;
        top: calc(var(--font-size-meta) * var(--line-height));
        content: "";
        border-color: var(--theme-hover) transparent;
        border-style: solid;
        border-width: 1rem 1rem 0 1rem;
        height: 0;
        width: 0;
        transform-origin: 50% 50%;
        transform: rotate(145deg);
        right: 1rem;
      }
    }
  }
}
.excerpt {
  &_container {
    @extend .article_body;
    width: 100%;
    height: 100%;
    display: block;
    grid-gap: 0;
    border-radius: 0.25rem;
    background: var(--bg);
    @include color-scheme_transition;
    margin-bottom: var(--inner_margin);
    .content &, .article_body & {
      @include link-lvhfa-inherit;
    }
    &:last-child {
      margin-bottom: 0;
    }
    @include drop-shadow(3rem, 0.1, 0.3);
    @media (any-hover: hover) {
      &:hover,
      &:focus {
        color: var(--text-hover);
        background: var(--bg-hover);
      }
    }
  }
  &_header,
  &_title,
  &_meta,
  &_main,
  &_thumbnail,
  &_content,
  &_footer {
    width: 100%;
  }
  &_header {
    font-size: var(--font-size_heading);
  }
  &_title,
  &_meta {
    padding: 0 var(--inner_padding);
  }
  &_title {
    padding-top: var(--inner_padding);
    margin: 0;
  }
  &_main {
    padding: 0;
    @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
      &.image.content {
        .excerpt_thumbnail {
          float: left;
          padding: var(--inner_padding_4-3) var(--inner_padding_4-2) var(--inner_padding_4-2) var(--inner_padding);
          max-width: 60%;
        }
      }
    }
    @media screen and (min-width: $screenViewBreakpointWidthOneColumn) {
      &.image.content {
        .excerpt_thumbnail {
          max-width: 40%;
        }
      }
    }
  }
  &_thumbnail {
    padding: var(--inner_padding_4-3) var(--inner_padding) var(--inner_padding_4-2) var(--inner_padding);
    img {
      margin: 0;
      min-height: 4rem;
      max-height: 8rem;
      @supports (aspect-ratio: 2 / 1) {
        aspect-ratio: 16 / 9;
        height: auto;
        min-height: unset;
        max-height: unset;
      }
    }
    @media screen and (min-width: $screenViewBreakpointWidthMobile) {
      border-radius: 0.5rem;
    }
  }
  &_content {
    // Avoid overflow at bottom
    height: auto;
    padding: 0 var(--inner_padding);
  }
  &_footer {
    clear: both;
    display: flex;
    flex-direction: row-reverse;
    justify-content: space-between;
    &_link {
      display: flex;
      flex-direction: row-reverse;
      justify-content: space-between;
      align-items: baseline;
    }
    &_read-on,
    &_page-count {
      padding: var(--inner_padding_4-1) var(--inner_padding) var(--inner_padding) var(--inner_padding);
      margin: 0;
    }
    &_read-on {
      // display: none;
      .read-on {
        // Note: The content below contains UTF-8-encoded &nbsp;
        // Do not use &nbsp; because Dart SASS does not support mixing
        // Unicode with HTML escaped symbols within a string
        &::before {
          content: "↳  ";
        }
      }
      text-align: right;
    }
    // @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
    //   & {
    //     padding-bottom: 0;
    //   }
    //   &_read-on {
    //     display: block;
    //   }
    // }
  }
  &_container {
    &, & > a {
      display: flex;
      flex-direction: column;
      // For IE 11
      height: 100%;
      @supports (display: flex) {
        height: auto;
        flex: 0 0 100%;
      }
    }
  }
  &_main {
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
  }
  @supports (display: grid) {
    &_content {
      // For everything other than IE 11
      min-height: unset;
    }
    @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
      &_container {
        margin: var(--inner_margin) 0 0 0;
      }
      &_grid {
        // Auto-fit as many items on a row as possible without going under $list-excerpt-width
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(#{$list-excerpt-width}, 1fr));
        grid-auto-flow: dense;
        grid-gap: var(--inner_padding)  var(--inner_padding);
        margin: 0;
        .excerpt_container {
          margin: 0;
        }
      }
      &_container {
        .excerpt_main {
          &.image.content {
            .excerpt_thumbnail {
              float: none;
              padding-right: var(--inner_padding);
              max-width: 100%;
            }
            .excerpt_content {
              // Avoid overflow at bottom
              height: auto;
            }
          }
        }
      }
      @media screen and (min-width: $screenViewBreakpointWidthOneColumn) {
        &_container.featured {
          grid-column: auto / span 2;
          .excerpt_main {
            &.image.content {
              .excerpt_thumbnail {
                float: left;
                padding: var(--inner_padding_4-3) var(--inner_padding_4-2) var(--inner_padding_4-2) var(--inner_padding);
                max-width: 50%;
              }
            }
          }
        }
      }
    }
  }
}
.sidebar {
  @include aside;
  margin-top: var(--inner_margin_4-6);
  background: linear-gradient(0deg, transparent 0%, var(--haze) calc(100% - 2px), var(--xhaze) calc(100% - 2px));
  &_inner {
    position: relative;
    margin: 0;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-between;

    & > *:not(:first-child) {
      margin-left: 0;
    }
    gap: var(--inner_margin);

    @include color-scheme_transition;
    @include inner_horizontal-padding;
    @media screen and (min-width: $screenViewBreakpointWidthTwoColumn) {
      @supports (display: grid) {
        margin: 0 var(--inner_margin);
        @include element-padding('inner', 0, 0.5, 0, 0.5);
      }
    }
  }
  @media screen and (min-width: $screenViewBreakpointWidthTwoColumn) {
    @supports (display: grid) {
      background: none;
      &_inner {
        background: linear-gradient(0deg, transparent 0%, var(--haze) calc(100% - 2px), var(--xhaze) calc(100% - 2px));
      }
    }
  }
  @media screen and (min-width: $screenViewBreakpointWidthWide) {
    @supports (display: grid) {
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      &_inner {
        @include body_full-bleed_left-padding;
        @include inner_padding_4-2;
        background: linear-gradient(90deg, transparent 0%, var(--haze) calc(100% - 2px), var(--xhaze) calc(100% - 2px));
        margin: 0 calc(-1 * var(--inner_padding_4-2)) 0 calc(-1 * var(--inner_padding_4-2));
        @include color-scheme_transition;
        h2 {
          &:first-of-type {
            margin-top: calc(1em * (1 - var(--line-height-heading)));
            padding-top: 0;
          }
        }
      }
    }
  }
}
.author {
  &_header {
    display: grid;
    grid-template-columns: 3rem 1fr;
    grid-gap: 1rem;
  }
  &_bio {
    a {
      color: var(--theme);
    }
  }
}
.pagination {
  display: flex;
  margin: var(--inner_margin) 0;
}
.page {
  &-item {
    padding: 0.2rem;
    &.disabled {
      opacity: 0.7;
    }
    &:first-child,
    &:last-child {
      display: none;
    }
    &.active a {
      background-color: var(--theme-hover);
    }
  }
  &-link {
    padding: 0.25rem 0.75rem;
    background-color: var(--theme);
    color: var(--theme-text);
    border-radius: 1rem;
  }
  &_only {
    display: none !important;
  }
  & &_only {
    display: inline !important;
  }
}
.round {
  border-radius: 50%;
  max-width: 100%;
  height: auto;
  padding: 0;
  vertical-align: middle;
}
.float {
  &_left {
    float: left;
    margin-right: 1rem;
    + p {
      padding-top: 0;
    }
  }
  &_right {
    float: right;
    margin-left: 1rem;
  }
  &_left,
  &_right {
    &::after {
      clear: both;
    }
  }
}
.follow {
  display: flex;
  align-items: center;
  flex: 1;
  justify-content: flex-end;
  svg {
    margin-left: 0.75rem;
    fill: var(--text);
  }
}
.img {
  &_alt {
    font-style: italic;
    padding-top: 0rem;
    opacity: 0.67;
  }
}
kbd {
  display: inline-block;
  margin: 0 0.1rem;
  padding: 0.1rem 0.6rem;
  // @include useFontDefinition(meta);
  @extend .font-meta !optional;
  background-clip: padding-box;
  border: 1px solid rgba(var(--RGB_text), 0.2);
  border-radius: 0.25rem;
  box-shadow: 0 1px 0.2rem rgba(0, 0, 0, 0.1), inset 0 1px 0 0 #fff;
  overflow-wrap: break-word;

  kbd {
    box-shadow: none;
    border: none;
  }
}

/* ----- SHORTCODES ------- */

// Shortcode note
// Purpose: Insert notes in the style of sticky notes
// Usage:
// {{ <note important> }} {{ </note> }}

// https://jsfiddle.net/dkaufmanjs/nq63nr6L/

$note-bg-yellow-lit: hsl(60, 100%, 77%);
$note-bg-orange-lit: hsl(25, 100%, 77%);
$note-bg-red-lit: hsl(0, 100%, 77%);
$note-bg-green-lit: hsl(160, 100%, 77%);
$note-bg-blue-lit: hsl(210, 100%, 77%);

$note-bg-yellow-dim: hsl(60, 100%, 10%);
$note-bg-orange-dim: hsl(25, 100%, 10%);
$note-bg-red-dim: hsl(0, 100%, 10%);
$note-bg-green-dim: hsl(160, 100%, 10%);
$note-bg-blue-dim: hsl(210, 100%, 10%);

.note {
  margin: 1rem 5% 1rem 5%;
  padding: 0.5rem 1rem;
  position: relative;
  // z-index: ($main-z-index  + 1)
  // background: var(--neutral-haze);
  @include color-scheme_transition;
  color: var(--text);
  // Replaced by utility classes
  // @include useFontDefinition(default);
  display: inline-block;
  background: transparent;
  width: 90%;
  height: 100%;
  border: 0.0625rem solid var(--note-border-yellow);
  border-bottom-right-radius: 4rem 0.5rem;
  --note-bg-yellow: #{$note-bg-yellow-lit};
  --note-bg-yellow-light: #{scale-color($note-bg-yellow-lit, $lightness: 53%)};
  --note-bg-yellow-top: #{scale-color($note-bg-yellow-lit, $saturation: -3%, $lightness: -10%)};
  --note-border-yellow: #{scale-color($note-bg-yellow-lit, $saturation: -100%, $lightness: 60%)};

  --note-bg-orange: #{$note-bg-orange-lit};
  --note-bg-orange-light: #{scale-color($note-bg-orange-lit, $lightness: 53%)};
  --note-bg-orange-top: #{scale-color($note-bg-orange-lit, $saturation: -3%, $lightness: -3%)};
  --note-border-orange: #{scale-color($note-bg-orange-lit, $saturation: -100%, $lightness: 60%)};

  --note-bg-red: #{$note-bg-red-lit};
  --note-bg-red-light: #{scale-color($note-bg-red-lit, $lightness: 53%)};
  --note-bg-red-top: #{scale-color($note-bg-red-lit, $saturation: -3%, $lightness: -3%)};
  --note-border-red: #{scale-color($note-bg-red-lit, $saturation: -100%, $lightness: 60%)};

  --note-bg-green: #{$note-bg-green-lit};
  --note-bg-green-light: #{scale-color($note-bg-green-lit, $lightness: 53%)};
  --note-bg-green-top: #{scale-color($note-bg-green-lit, $saturation: -3%, $lightness: -3%)};
  --note-border-green: #{scale-color($note-bg-green-lit, $saturation: -100%, $lightness: 60%)};

  --note-bg-blue: #{$note-bg-blue-lit};
  --note-bg-blue-light: #{scale-color($note-bg-blue-lit, $lightness: 53%)};
  --note-bg-blue-top: #{scale-color($note-bg-blue-lit, $saturation: -3%, $lightness: -3%)};
  --note-border-blue: #{scale-color($note-bg-blue-lit, $saturation: -100%, $lightness: 60%)};

  --note-bg: var(--note-bg-yellow);
  --note-bg-light: var(--note-bg-yellow-light);
  --note-bg-top: var(--note-bg-yellow-top);
  --note-border: var(--note-border-yellow);

  --note-shadow-bg: rgba(0, 0, 0, 0.40);
  &.important,
  &.orange {
    --note-bg: var(--note-bg-orange);
    --note-bg-light: var(--note-bg-orange-light);
    --note-bg-top: var(--note-bg-orange-top);
    --note-border: var(--note-border-orange);
  }
  &.red {
    --note-bg: var(--note-bg-red);
    --note-bg-light: var(--note-bg-red-light);
    --note-bg-top: var(--note-bg-red-top);
    --note-border: var(--note-border-red);
  }
  &.green {
    --note-bg: var(--note-bg-green);
    --note-bg-light: var(--note-bg-green-light);
    --note-bg-top: var(--note-bg-green-top);
    --note-border: var(--note-border-green);
  }
  &.blue {
    --note-bg: var(--note-bg-blue);
    --note-bg-light: var(--note-bg-blue-light);
    --note-bg-top: var(--note-bg-blue-top);
    --note-border: var(--note-border-blue);
  }
  background: rgb(255, 255, 136);
  background: linear-gradient(135deg, var(--note-bg) 80%, var(--note-bg) 85%, var(--note-bg-light) 100%);

  &::before {
    content: "";
    position: absolute;
    z-index: ($main-z-index  - 2);
    left: 0;
    top: -3rem;
    margin-top: 3rem;
    width: 100%;
    height: calc(100% - 3rem);
    border-top: 3rem solid var(--note-bg-top);
    border-bottom-right-radius: 4rem 0.5rem;
    display: inline-block;
    background: rgb(255, 255, 136);
    background: linear-gradient(135deg, var(--note-bg) 80%, var(--note-bg) 85%, var(--note-bg-light) 100%);
  }
  &::after {
    content: "";
    position: absolute;
    z-index: ($main-z-index  - 3);
    right: 0;
    bottom: 1rem;
    width: 8rem;
    height: 1rem;
    background: rgba(0, 0, 0, 0.2);
    box-shadow: 2px 15px 5px var(--note-shadow-bg);
    transform: matrix(-1, -0.1, 0, 1, 0, 0);
  }
  &_wrap {
    position: relative;
    z-index: ($main-z-index  + 1);
  }
  + highlight_wrap {
    margin-top: 2.25rem;
  }
  h2 {
    font-size: 150%;
  }
  h3 {
    font-size: 120%;
  }
  h4 {
    font-size: 100%;
  }
  h2,
  h3,
  h4,
  h5 {
    color: var(--text);
    margin: 0;
    padding: 0;
  }
}
@mixin note-dim-colors {
  --note-bg-yellow: #{$note-bg-yellow-dim};
  --note-bg-yellow-light: #{scale-color($note-bg-yellow-dim, $lightness: -53%)};
  --note-bg-yellow-top: #{scale-color($note-bg-yellow-dim, $saturation: -3%, $lightness: -2%)};
  --note-border-yellow: #{scale-color($note-bg-yellow-dim, $saturation: -100%, $lightness: 20%)};
  --note-bg-orange: #{$note-bg-orange-dim};
  --note-bg-orange-light: #{scale-color($note-bg-orange-dim, $lightness: -53%)};
  --note-bg-orange-top: #{scale-color($note-bg-orange-dim, $saturation: -3%, $lightness: -2%)};
  --note-border-orange: #{scale-color($note-bg-orange-dim, $saturation: -100%, $lightness: 20%)};
  --note-bg-red: #{$note-bg-red-dim};
  --note-bg-red-light: #{scale-color($note-bg-red-dim, $lightness: -53%)};
  --note-bg-red-top: #{scale-color($note-bg-red-dim, $saturation: -3%, $lightness: -2%)};
  --note-border-red: #{scale-color($note-bg-red-dim, $saturation: -100%, $lightness: 20%)};
  --note-bg-green: #{$note-bg-green-dim};
  --note-bg-green-light: #{scale-color($note-bg-green-dim, $lightness: -53%)};
  --note-bg-green-top: #{scale-color($note-bg-green-dim, $saturation: -3%, $lightness: -2%)};
  --note-border-green: #{scale-color($note-bg-green-dim, $saturation: -100%, $lightness: 20%)};
  --note-bg-blue: #{$note-bg-blue-dim};
  --note-bg-blue-light: #{scale-color($note-bg-blue-dim, $lightness: -53%)};
  --note-bg-blue-top: #{scale-color($note-bg-blue-dim, $saturation: -3%, $lightness: -2%)};
  --note-border-blue: #{scale-color($note-bg-blue-dim, $saturation: -100%, $lightness: 20%)};
  --note-shadow-bg: rgba(0, 0, 0, 0.95);
}
@media screen {
  html[data-color-scheme="dark"] {
    .note {
      @include note-dim-colors;
    }
  }
}
@media screen and (prefers-color-scheme: dark) {
  html:not([data-color-scheme="light"]) {
    .note {
      @include note-dim-colors;
    }
  }
}

// Shortcode responsive-figure
// Purpose: Insert images and code blocks that respond to screen size
// Usage:
// {{ <responsive-image src="/images/picture" caption="This is the picture"> }}
// {{ <responsive-code caption="Example code"> }}
// {{ </responsive-code> }}
.shortcode_responsive-figure,
.excerpt_container {
  margin: var(--inner_margin) auto;
}
.content .responsive-image_container,
.shortcode_responsive-figure,
.excerpt_container {
  --float_margin: var(--inner_margin_4-3);
  // padding: var(--inner_padding) var(--inner_padding)
  --float_margin-top: calc( (1 + (var(--line-height) - 1) / 2) * 1em);
  border-radius: 0.125rem;
  // Remove any surrounding margins and padding from elements
  // within the figure
  & > div {
    margin: 0;
    padding: 0;
  }
  &_img {
    display: block;
    margin: 0 auto;
    padding: 0;
    border-radius: 0.125rem;
    // height: auto
    max-width: 100%;
    max-height: 100%;
  }
  &.caption {
    background: var(--figure-bg);
    @include color-scheme_transition;
    padding: var(--inner_padding_4-2)  var(--inner_padding_4-2);
    color: var(--text);
    // Replaced by utility classes
    // @include useFontDefinition(meta);
    & > figcaption {
      width: 100%;
      padding: var(--inner_padding_4-2) 0 0 0;
    }
  }
  &.background-light {
    background: var(--bg-light);
    @include color-scheme_transition;
    color: var(--text-light);
  }
  &.background-dark {
    background: var(--bg-dark);
    @include color-scheme_transition;
    color: var(--text-dark);
  }
  &_img {
    &.shape-round {
      border-radius: 50%;
    }
  }
  &.float-left,
  &.float-right {
    float: none;
    max-width: 100%;
    // max-width: calc(0.8 * (#{$screenViewBreakpointWidthMobile} - 2 * var(--inner_padding) ) )
    margin: var(--inner_margin) auto;
  }
  *:not(figure) + & {
    clear: both;
  }
  &.relative-width-50, &.relative-width-60 {
    max-width: 100%;
  }
  @media screen and (min-width: $screenViewBreakpointWidthMobile) {
    &.float-left,
    &.float-right {
      max-width: 80%;
    }
    &.relative-width-20 {
      &.float-left {
        float: left;
        margin: 0.75rem;
        margin: var(--float_margin-top) var(--float_margin) var(--float_margin) 0;
      }
      &.float-right {
        float: right;
        margin: 0.75rem;
        margin: var(--float_margin-top) 0 var(--float_margin) var(--float_margin);
      }
    }
    &.relative-width-20 {
      max-width: 40%;
    }
  }

  @media screen and (min-width: $screenViewBreakpointWidthNarrow) {
    &.relative-width-20 {
      max-width: 30%;
    }
    &.relative-width-30 {
      &.float-left {
        float: left;
        margin: 0.75rem;
        margin: var(--float_margin-top) var(--float_margin) var(--float_margin) 0;
      }
      &.float-right {
        float: right;
        margin: 0.75rem;
        margin: var(--float_margin-top) 0 var(--float_margin) var(--float_margin);
      }
    }
    &.relative-width-30 {
      max-width: 40%;
    }
    &.relative-width-40 {
      max-width: 50%;
    }
    &.relative-width-50 {
      max-width: 60%;
    }
    &.relative-width-60 {
      max-width: 70%;
    }
  }

  @media screen and (min-width: $screenViewBreakpointWidthOneColumn), print {
    &.float-left,
    &.float-right {
      max-width: 60%;
    }
    &.float-left {
      float: left;
      margin: 0.75rem;
      margin: var(--float_margin-top) var(--float_margin) var(--float_margin) 0;
    }
    &.float-right {
      float: right;
      margin: 0.75rem;
      margin: var(--float_margin-top) 0 var(--float_margin) var(--float_margin);
    }
    &.relative-width-20 {
      max-width: 30%;
    }
    &.relative-width-30 {
      max-width: 40%;
    }
    &.relative-width-40 {
      max-width: 50%;
    }
    &.relative-width-50 {
      max-width: 50%;
    }
    &.relative-width-60 {
      max-width: 60%;
    }
  }

  @media screen and (min-width: $screenViewBreakpointWidthWide), print {
    &.relative-width-20 {
      max-width: 20%;
    }
    &.relative-width-30 {
      max-width: 30%;
    }
    &.relative-width-40 {
      max-width: 40%;
    }
    &.relative-width-50 {
      max-width: 50%;
    }
    &.relative-width-60 {
      max-width: 60%;
    }
  }
}
