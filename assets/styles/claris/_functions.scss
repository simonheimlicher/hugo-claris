@use 'sass:meta';
@use 'sass:math';

// Replace substring with another string
// Credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  // @debug "str-replace('#{$string}', '#{$search}', '#{$replace}')";
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions/
@function joinArray($list, $glue: '', $is-nested: false) {
  // Check if the argument is a list
  @if type-of($list) != 'list' {
    @warn "#{inspect($list)} is not a list.";
    @return null;
  }
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    } @else {
      @if $e == '' {
        @warn 'joinArray: adding empty e in list=[#{$list}] at position #{$i}';
      }
      // Note: need to wrap string concatenation in '' to avoid spurious spaces
      $result: if(
        $i != length($list) or $is-nested,
        '#{$result}#{$e}#{$glue}',
        '#{$result}#{$e}'
      );
      // @debug 'joinArray: added e="#{$e}" in list=[#{$list}] at position #{$i}: "#{$result}"';
    }
  }
  @return $result;
}

// https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions/
@function sliceArray($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }

  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }

  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }

  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }

  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }

  @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

// https://stackoverflow.com/a/64863842
@function colorVarToRGB($value) {
  @return round(red($value)), round(green($value)), round(blue($value));
}

@function mapColorVarToRGB($colors, $value) {
  $color_value: $value;
  @if str-slice(#{$value}, 1, 3) == "var" {
    $color_key: str-replace($value, 'var(--');
    $color_key: str-replace($color_key, ')');
    $color_value: map-get($colors, $color_key);
    @if $color_value == null {
      $color_value: #ff0000;
      @debug "mapColorVarToRGB($colors, #{$value})";
      @debug "    key not found; defaulting to red: #{inspect($color_value)}";
    }
    @if str-slice(#{$color_value}, 1, 3) == "var" {
      @return mapColorVarToRGB($colors, $color_value);
    }
  }
  @return colorVarToRGB($color_value);
}

@function colorVarToHSLRounded($value) {
  @return round(hue($value)), round(saturation($value)), round(lightness($value)), alpha($value);
}

@function colorVarToHSL($value) {
  @return hue($value), saturation($value), lightness($value), alpha($value);
}

@function mapColorVarToHSL($colors, $value) {
  $color_value: $value;
  @if str-slice(#{$value}, 1, 3) == "var" {
    $color_key: str-replace($value, 'var(--');
    $color_key: str-replace($color_key, ')');
    $color_value: map-get($colors, $color_key);
    @if $color_value == null {
      $color_value: #ff0000;
      @debug "mapColorVarToRGB($colors, #{$value})";
      @debug "    key not found; defaulting to red: #{inspect($color_value)}";
    }
    @if str-slice(#{$color_value}, 1, 3) == "var" {
      @return mapColorVarToHSL($colors, $color_value);
    }
  }
  @return colorVarToHSL($color_value);
}

@function roundDec($value, $fractionDigits: 0) {
  $power: math.pow(10, $fractionDigits);
  @return math.div(math.round($power * $value), $power);
}

// A function for filling in a map variable with default values
// https://stackoverflow.com/a/33536471/617559
@function updateMap($defaultMap, $updateMap: ()) {
  $mergedMap: ();
  @if (type-of($defaultMap) == 'map') {
    $mergedMap: $defaultMap;
    @if (type-of($updateMap) == 'map') {
      // We iterate over each property of the defaultMap
      @each $key, $value in $updateMap {
          // Add the default value to mergedMap
          $mergedMap: map-merge($mergedMap, ($key : $value));
      }
    }
  }
  @return $mergedMap;
}

// Take the default unless update is non-null
@function defaultTo($defaultValue, $updateValue: null) {
  $finalValue: $defaultValue;
  @if (type-of($updateValue) != 'null') {
    $finalValue: $updateValue;
  }
  @return $finalValue;
}

@mixin mapToCSSProperties($map, $prefix, $key: "") {
  @each $name, $value in $map {

      // copy the map key
      $key-copy: $key;
      // create name for CSS custom property that contains:
      // current key + child key from nested map
      $key: #{$key}_#{$name};

      @if meta.type-of($value) == "map" {
          // if value is a map, invoke it once more
          @include mapToCSSProperties($value, $prefix, $key);
      }
      @else {
        @if (meta.type-of($value) == 'list') {
          $value: inspect($value);
        }
        --#{$prefix}#{$key}: #{$value};
      }
      // next iteration of loop should go with unchanged key
      $key: $key-copy;
  }
}

@function print-map ( $map, $prefix: "", $str: "" ) {
  @each $k, $v in $map {
    @if type-of($v) == map {
      $str: "#{$str} \000D\000A#{$prefix}#{$k}: ( #{print-map($v, "  #{$prefix}")} \000D\000A #{$prefix}), ";
    }
    @else {
      $str: "#{$str} \000D\000A#{$prefix}#{$k}: #{$v}, ";
    }
  } // each
  @return str-slice($str, 0, -3);
} // @function print-map
