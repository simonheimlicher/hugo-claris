@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:math';

/// Return true if `$string` contains `$search`
/// @param {String} $string - Haystack
/// @param {String} $search - Needle
/// @return {String} - Boolean
@function stringContains($string, $search) {
  $index: string.index($string, $search);
  @if $index == null {
    @return false;
  }
  @return true;
}

/// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function stringReplace($string, $search, $replace) {
  $index: string.index($string, $search);
  @if $index == null {
    @return $string;
  }
  $before: string.slice($string, 1, $index - 1);
  $after: string.slice($string, $index + string.length($search));
  @return $before + $replace + $after;
}

/// Strip `$prefix` and `$postfix` from `$string`
/// @param {String} $string - Initial string
/// @param {String} $prefix - Prefix to remove
/// @param {String} $postfix - Postfix to remove
/// @return {String} - Updated string
@function stringExtract($string, $prefix, $postfix) {
  // Ensure the string starts with the prefix
  @if string.index($string, $prefix) != 1 {
    @error "Prefix not found or does not start at the beginning of the string.";
  }

  // Remove the prefix
  $trimmed: string.slice($string, string.length($prefix) + 1);

  // Ensure the string ends with the postfix
  $postfix-length: string.length($postfix);
  $trimmed-length: string.length($trimmed);
  @if string.slice($trimmed, -$postfix-length) != $postfix {
    @error "Postfix '#{$postfix}' not found or does not end the string '#{$string}'";
  }

  // Remove the postfix
  $final: string.slice($trimmed, 1, $trimmed-length - $postfix-length);
  @return $final;
}

// https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions/
@function joinArray($list, $glue: '', $is-nested: false) {
  // Check if the argument is a list
  @if meta.type-of($list) != 'list' {
    @warn "#{meta.inspect($list)} is not a list.";
    @return null;
  }
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if meta.type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    } @else {
      @if $e == '' {
        @warn 'joinArray: adding empty e in list=[#{$list}] at position #{$i}';
      }
      // Note: need to wrap string concatenation in '' to avoid spurious spaces
      $result: if(
        $i != length($list) or $is-nested,
        '#{$result}#{$e}#{$glue}',
        '#{$result}#{$e}'
      );
      // @debug 'joinArray: added e="#{$e}" in list=[#{$list}] at position #{$i}: "#{$result}"';
    }
  }
  @return $result;
}

// https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions/
@function sliceArray($list, $start: 1, $end: length($list)) {
  $result: null;

  @if meta.type-of($start) != number or meta.type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }

  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }

  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }

  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }

  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }

  @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function roundDec($value, $fractionDigits: 0) {
  $power: math.pow(10, $fractionDigits);
  @return math.div(math.round($power * $value), $power);
}

// A function for filling in a map variable with default values
// https://stackoverflow.com/a/33536471/617559
@function updateMap($defaultMap, $updateMap: ()) {
  $mergedMap: ();
  @if (meta.type-of($defaultMap) == 'map') {
    $mergedMap: $defaultMap;
    @if (meta.type-of($updateMap) == 'map') {
      // We iterate over each property of the defaultMap
      @each $key, $value in $updateMap {
          // Add the default value to mergedMap
          $mergedMap: map.merge($mergedMap, ($key : $value));
      }
    }
  }
  @return $mergedMap;
}

// Take the default unless update is non-null
@function defaultTo($defaultValue, $updateValue: null) {
  $finalValue: $defaultValue;
  @if (meta.type-of($updateValue) != 'null') {
    $finalValue: $updateValue;
  }
  @return $finalValue;
}

@mixin mapToCSSProperties($map, $prefix, $key: "") {
  @each $name, $value in $map {

      // copy the map key
      $key-copy: $key;
      // create name for CSS custom property that contains:
      // current key + child key from nested map
      $key: #{$key}_#{$name};

      @if meta.type-of($value) == "map" {
          // if value is a map, invoke it once more
          @include mapToCSSProperties($value, $prefix, $key);
      }
      @else {
        @if (meta.type-of($value) == 'list') {
          $value: meta.inspect($value);
        }
        --#{$prefix}#{$key}: #{$value};
      }
      // next iteration of loop should go with unchanged key
      $key: $key-copy;
  }
}

@function print-map ( $map, $prefix: "", $str: "" ) {
  @each $k, $v in $map {
    @if meta.type-of($v) == map {
      $str: "#{$str} \000D\000A#{$prefix}#{$k}: ( #{print-map($v, "  #{$prefix}")} \000D\000A #{$prefix}), ";
    }
    @else {
      $str: "#{$str} \000D\000A#{$prefix}#{$k}: #{$v}, ";
    }
  } // each
  @return str-slice($str, 0, -3);
} // @function print-map
