@use "hugo-vars" as hugo;
@use "variables" as variables;

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-kerning: normal;
  -webkit-text-size-adjust: 100%;
  text-rendering: optimizeSpeed;
  &::-webkit-scrollbar-corner {
    background-color: transparent;
  }
  font-size: 100%;
}
body {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  margin: 0 auto;
  background: var(--choice-bg);
  color: var(--text);
  font-size: var(--font-size);

  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  &.macos,
  &.windows,
  &.ios {
    // font-variant: common-ligatures
    text-rendering: optimizeLegibility;
  }
  // https://web.dev/prefers-color-scheme/#activating-dark-mode-in-the-operating-system
  // transition: color var(--color-scheme-duration) var(--color-scheme-timing), background-color var(--color-scheme-duration) var(--color-scheme-timing)
  // transition: all var(--color-scheme-duration) var(--color-scheme-timing)
  @include variables.color-scheme_transition;

  // Allow breaking long words including URLs
  // https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
  // These are technically the same, but use both
  // https://stackoverflow.com/a/67249632/617559
  // Prioritizes keeping any and all words unbroken while avoiding overflow, so if a word
  // is too long to fit on the rest of the line, it wraps first and tries to fit the rest
  // of the text on the next line
  overflow-wrap: break-word;
  word-wrap: break-word;

  // word-break: break-all; Prioritizes minimizing the space wasted while avoiding overflow,
  // before keeping any words unbroken, so it never wraps anywhere but at the right margin
  // word-break: break-word

  // Adds a hyphen where the word breaks, if supported
  hyphens: auto;
}
a {
  text-decoration: none;
  color: inherit;
  &:focus,
  &:focus-within {
    // Allow overrriding outline for accessibility
    outline: none; // !important;
  }
  &:hover {
    @media (any-hover: hover) {
      // text-decoration-line: underline
      // text-underline-position: under
      // text-underline-offset: 0.1em
      color: var(--text-hover);
    }
  }
  &:active {
    color: var(--xaccent);
  }
  &:focus:not(&:active) {
    outline: 1px dashed var(--link-focus);
  }
  // Avoid adding a hyphen where the word breaks
  & {
    hyphens: none;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  // Allow hyphenation in block elements within a
  div,
  section,
  article,
  aside,
  header,
  p {
    hyphens: auto;
  }
}
h1,
h2,
h3,
h4,
h5,
h6 {
  // padding: $heading-padding-top 0 calc(#{$heading-padding-top} * 0.25) 0;
  margin: variables.$heading-margin-top 0 calc(#{variables.$heading-margin-top} * 0.25) 0;
  color: var(--header-text);
  // Replaced by utility classes
  // @include useFontDefinition(default, display, default, strong);
  // @extend .role-display;
  // @extend strong;
  // line-height: var(--line-height);
  font-weight: var(--font-weight-strong);
  hyphens: manual;
  .icon,
  .icon svg {
    width: 1em;
    height: 1em;
  }
  &.heading_link {
    margin-right: 2em;
  }
  .link {
    position: relative;
    margin: 0 -2em 0 0;
    padding: 0 0 0 0.25em;
    // opacity: 0.25
    display: inline-flex;
    flex-direction: column;
  }
  .icon svg {
    position: absolute;
    top: 0.1em;
  }
  &:hover .link {
    opacity: 1;
    fill: var(--link-hover);
  }
}
h1 {
  font-size: var(--font-size-larger-3);
}
h2 {
  font-size: var(--font-size-larger-2);
}
h3 {
  font-size: var(--font-size-larger-1);
}
h4, h5, h6 {
  font-size: var(--font-size-normal);
}

img,
svg {
  max-width: 100%;
  vertical-align: middle;
}
img {
  height: auto;
  // margin: 1rem auto
  margin: 0;
  padding: 0;
  &:focus,
  &:focus-within {
    outline: none !important;
    border: none !important;
  }
// Only render images when in viewport
// https://www.industrialempathy.com/posts/image-optimizations/#update-01%2F27%2F2021-contain-intrinsic-size-no-longer-needed
}
main img {
  content-visibility: auto;
}
@include variables.list-style_indented;

// em {
//   font-weight: var(--font-weight);
// }
// Avoid `pre` breaking width of grid columns
pre {
  min-width: 0;
}
b,
strong {
  font-weight: var(--font-weight-strong);
}
sup,
sub {
  line-height: 0;
}
hr {
  border: none;
  padding: 1px;
  background: var(--xhaze);
  // opacity: 0.5;
  margin: var(--inner_margin) 0;
}
aside {
  h3 {
    position: relative;
    margin: 0 !important;
  }
}
table {
  width: 100%;
  border-collapse: collapse;
  background: var(--table-haze);
}
td,
th {
  padding: 0.5rem 1rem;
  border: 1px solid var(--table-border);
  font-weight: var(--font-weight);
  &:not(:first-child) {
    padding-left: 1.5rem;
  }
}
th {
  font-weight: var(--font-weight-strong);
}
tbody {
  padding: 0;
  tr {
    &:nth-child(even) {
      background-color: var(--table-haze);
    }
    &:nth-child(odd) {
      background-color: var(--table-bg);
    }
  }
}
blockquote {
  // margin: 1.5rem auto
  // quotes: '\201C''\201D''\2018''\2019'
  // padding: 1.5rem
  // color: var(--text)
  // padding: 1rem 1.5rem
  // border-left: 0.25rem solid var(--theme)
  // position: relative
  // background: var(--haze)
  font-style: italic;
  // font-weight: lighter
  // Source: https://codepen.io/bharanim/pen/BoLNdd
  $blockquote-quotation-color-open: rgba(var(--RGB_text), 0.5);
  $blockquote-quotation-color-close: rgba(var(--RGB_text), 0.1);
  --box-margin-top: 0.25em;
  --box-margin-right: 0;
  --box-margin-bottom: calc(0.5 * var(--box-margin-top));
  --box-margin-left: 0;

  --box-padding-top: 0.5rem;
  // NOTE: It's important to avoid that the quotation mark sticks out on the right hand side
  // This may induce a horizontal scoll bar with side effects such as the navigation bar
  // moving slightly even when 'position: fixed' is set
  --box-padding-right: 1.0rem;
  --box-padding-bottom: calc(1.2 * var(--box-padding-top));
  --box-padding-left: calc(var(--quotation-mark-open-height));

  --quotation-mark-font-size-to-height-factor: 5;
  --quotation-mark-open-height: calc(1 * var(--font-size));
  --quotation-mark-open-font-size: calc(var(--quotation-mark-open-height) * var(--quotation-mark-font-size-to-height-factor));
  --quotation-mark-close-height: calc(2 * var(--font-size));
  --quotation-mark-close-font-size: calc(var(--quotation-mark-close-height) * var(--quotation-mark-font-size-to-height-factor));

  --quote-padding-left: calc(var(--box-padding-left) + 0.75 * var(--quotation-mark-open-height));
  --quote-padding-right: calc(var(--box-padding-right) + 1.5 * var(--quotation-mark-close-height));

  margin: var(--box-margin-top) var(--box-margin-right) var(--box-margin-bottom) var(--box-margin-left);

  color: var(--text);
  position: relative;
  // Setting overflow: hidden ensures that the blockquote only takes up
  // the available horizontal space when it is next to a float
  // NOTE: This seems to trigger a bug in Chrome v. 113: when scrolling to #fnref:2, e.g.,
  // https://simon.heimlicher.com/transformation/why-okr-objectives-key-results-already-have-goals/#fnref:2
  // the content of the blockquote shifts upward.
  overflow: hidden;
  background: transparent;

  width: calc(100% - var(--box-margin-left) - var(--box-margin-right));
  padding: calc(var(--box-padding-top)) calc(var(--box-padding-right) + var(--quote-padding-right)) calc(var(--box-padding-bottom)) calc(var(--box-padding-left) + var(--quote-padding-left));

  min-height: calc(1.25 * var(--quotation-mark-close-height));

  &::before {
    // @include useFontDefinition(serif);
    content: "“";
    position: absolute;
    top: calc(var(--box-padding-top) + var(--quotation-mark-open-height));
    left: 0;
    // @extend .font-serif;
    line-height: var(--quotation-mark-open-height);
    font-size: var(--quotation-mark-open-font-size);
    color: $blockquote-quotation-color-open;
    font-weight: normal;
  }
  &::after {
    // @include useFontDefinition(serif);
    content: "”";
    position: absolute;
    bottom: calc(0px - 0.5 * var(--quotation-mark-close-height));
    right: calc( var(--box-padding-right) - 0.5 * var(--quotation-mark-close-height));
    // @extend .font-serif;
    line-height: var(--quotation-mark-close-height);
    font-size: calc(var(--quotation-mark-close-font-size));
    color: $blockquote-quotation-color-close;
    font-weight: normal;
  }

  footer {
    text-align: right;
    margin: 0 4em 0 2em;
    margin: 0;
    cite {
      display: block;
      font-weight: var(--font-weight-light);
      opacity: 0.8;
      font-style: italic;
    }
  }
}
@media screen and (min-width: hugo.$screenViewBreakpointWidthOneColumn) and (min-height: hugo.$screenViewBreakpointHeightShallow) {
  .view-screen {
    blockquote {
      --quotation-mark-open-height: 1rem;
      --quotation-mark-close-height: 3rem;
      --box-margin-left: 5%;
      --box-margin-right: 5%;
    }
  }
}
@media screen and (min-width: hugo.$screenViewBreakpointWidthTwoColumn) {
  .view-screen {
    blockquote {
      --quotation-mark-open-height: 1.2rem;
      --quotation-mark-close-height: 3.6rem;
      --box-margin-left: 10%;
      --box-margin-right: 10%;

      h2,
      h3,
      h4,
      h5 {
        color: var(--text);
        margin: 0;
        padding: 0;
      }
      & + .highlight_wrap {
        margin-top: 2.25rem;
      }
    }
  }
}

dl {
  --column-gap: 1em;
  --dt-width: calc( (100% - var(--column-gap)) / 2);
  --dt-padding-left: calc(var(--dt-width) + var(--column-gap));
  --dd-width: calc(100% - var(--dt-width) - var(--column-gap));
  display: flex;
  flex-wrap: wrap;
  width: 100%;
}
dl > * {
  margin-top: 0.5em;
}
dt {
  width: var(--dt-width);
  font-weight: var(--font-weight-strong);
  text-align: right;
}
dd {
  width: var(--dd-width);
  padding-left: var(--column-gap);
  margin-left: 0;
}
dd + dd {
  width: 100%;
  padding-left: calc(var(--dt-padding-left));
}
dt + dt {
  padding-right: var(--dd-width);
}
dt + dt + dd {
  margin-top: -1.625em;
  /* own height including padding */
  padding-left: calc(var(--dt-padding-left));
}
@media screen and (min-width: hugo.$screenViewBreakpointWidthNarrow) {
  dl {
    --dt-width: 25%;
  }
}
