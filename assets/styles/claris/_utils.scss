@use "sass:meta";
@use "sass:math";
@use "hugo-vars" as hugo;
@use "variables" as variables;

@for $i from 1 through 2 {
  $size: $i * 1.5rem;
  $x-size: $size * 0.5;
  .pt-#{$i} {
    padding-top: $size;
  }
  .pb-#{$i} {
    padding-bottom: $size;
  }
  .mt-#{$i} {
    margin-top: $size;
  }
  .mb-#{$i} {
    margin-bottom: $size;
  }
}
.flex {
  display: flex;
  flex-direction: column;
  align-items: center;
}
.shadow {
  box-shadow: 0 0 60px rgba(0, 0, 0, 0.17);
}

.inner {
  @include variables.element-padding('inner', 1, 1);
  &_4-2 {
    @include variables.element-padding('inner', 0.5, 0.5);
  }
  &_top {
    @include variables.element-padding('inner', 1, unset, unset, unset);
  }
  &_bottom {
    @include variables.element-padding('inner', unset, unset, 1, unset);
  }
  &_full-bleed_left {
    @include variables.element-padding('inner', unset, unset, unset, 0);
  }
  &_horizontal {
    @include variables.element-padding('inner', unset, 1);

    .inner_top, &.inner_top {
      @include variables.element-padding('inner', 1, 1, unset, 1);
    }
    .inner_bottom, &.inner_bottom {
      @include variables.element-padding('inner', unset, 1, 1, 1);
    }
  }
  &_full-bleed_horizontal {
    @include variables.element-padding('inner', unset, 0);
  }
}

.outer {
  &_horizontal {
    @include variables.element-padding('outer', unset, 1);
  }
}

@media screen and (min-width: hugo.$screenViewBreakpointWidthTwoColumn) {
  .grid-main {
    display: grid;
    // https://css-tricks.com/preventing-a-grid-blowout/
    // Avoid code column (pre element) from busting the grid by setting
    // a min width of 0 via minmax
    --num-columns: 7;
    --main-column-width-min: #{hugo.$screenViewBreakpointWidthTwoColumn
        - 2 * hugo.$screenViewWidthAsideTwoColumn
        - 2 * hugo.$screenViewInnerPaddingOneColumn - 1rem};
    --main-column-width-max: #{hugo.$screenViewBreakpointWidthWide
        - 2 * hugo.$screenViewWidthAsideWide
        - 2 * hugo.$screenViewInnerPaddingOneColumn - 1rem};
    --sidebar-half-min: #{math.div(hugo.$screenViewWidthAsideTwoColumn, 2)};
    --sidebar-half-max: #{math.div(hugo.$screenViewWidthAsideWide, 2)};
    grid-template-columns:
      minmax(calc(max(env(safe-area-inset-left, 0px), var(--inner_padding))), 1fr)
      minmax(var(--sidebar-half-min), var(--sidebar-half-max)) minmax(var(--sidebar-half-min), var(--sidebar-half-max))
      minmax(var(--main-column-width-min), var(--main-column-width-max))
      minmax(var(--sidebar-half-min), var(--sidebar-half-max)) minmax(var(--sidebar-half-min), var(--sidebar-half-max))
      minmax(calc(max(env(safe-area-inset-right, 0px), var(--inner_padding))), 1fr);

    grid-template-rows: minmax(min-content, min-content) minmax(min-content, min-content);
    .content {
      grid-row: 1;
    }
    .content_singlecolumn {
      max-width: #{hugo.$screenViewBreakpointWidthTwoColumn};
    }
    .sidebar {
      grid-row: 2;
    }
    .article_aside {
      grid-column: 5 / span 2;
      @include variables.body_aside_right-padding;
    }
    .article_aside + .article_content {
      grid-column: 1 / span 4;
    }
    .grid-columns-all, .content, .sidebar, .header_multicolumn, .content_multicolumn {
      grid-column: 1 / span var(--num-columns);
    }
  }
}
@media screen and (min-width: hugo.$screenViewBreakpointWidthWide) {
  .grid-main {
    --main-column-width-min: #{hugo.$screenViewBreakpointWidthTwoColumn
        - 2 * hugo.$screenViewWidthAsideTwoColumn
        - 2 * hugo.$screenViewInnerPaddingOneColumn - 1rem};
    --main-column-width-max: #{max(hugo.$screenViewBreakpointWidthWide
        - 2 * hugo.$screenViewWidthAsideWide
        - 2 * hugo.$screenViewInnerPaddingOneColumn - 1rem, hugo.$screenViewBreakpointWidthTwoColumn)};
    --sidebar-half-min: #{math.div(hugo.$screenViewWidthAsideTwoColumn, 2)};
    --sidebar-half-max: #{math.div(hugo.$screenViewWidthAsideWide, 2)};
    grid-template-columns:
      minmax(calc(max(env(safe-area-inset-left, 0px), var(--inner_padding))), 1fr)
      minmax(var(--sidebar-half-min), var(--sidebar-half-max)) minmax(var(--sidebar-half-min), var(--sidebar-half-max))
      minmax(var(--main-column-width-min), var(--main-column-width-max))
      minmax(var(--sidebar-half-min), var(--sidebar-half-max)) minmax(var(--sidebar-half-min), var(--sidebar-half-max))
      minmax(calc(max(env(safe-area-inset-right, 0px), var(--inner_padding))), 1fr);

    .sidebar {
      grid-row: 1;
      grid-column: 2 / span 2;
    }
    .article_aside {
      grid-column: 5 / span 2;
    }
    .article_aside + .article_content {
      grid-column: 4 / span 1;
    }
    .content + .sidebar {
      grid-column: 2 / span 2;
    }
    .header_multicolumn, .content_multicolumn {
      margin-left: auto;
      margin-right: auto;
      max-width: calc(
        max(env(safe-area-inset-left, 0px), var(--inner_padding))
        + 4 * var(--sidebar-half-max)
        + var(--main-column-width-max)
        + max(env(safe-area-inset-right, 0px), var(--inner_padding))
      );
    }
  }
}

$sites: ("facebook": #325c94, "twitter": #00abdc,"linkedin": #007bb6);
@each $item, $color in $sites {
  .#{$item} {
    svg {
      fill: $color;
    }
  }
}
.inline {
  display: inline;
  margin: 0;
}
.hidden {
  display: none;
}
